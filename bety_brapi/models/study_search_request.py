# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class StudySearchRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, germplasm_db_ids: List[str]=None, location_db_ids: List[str]=None, observation_variable_db_ids: List[str]=None, page: int=None, page_size: int=None, program_db_ids: List[str]=None, program_names: List[str]=None, season_db_id: List[str]=None, sort_by: str=None, sort_order: str=None, study_db_ids: List[str]=None, study_locations: List[str]=None, study_names: List[str]=None, study_type: str=None, trial_db_ids: List[str]=None):  # noqa: E501
        """StudySearchRequest - a model defined in Swagger

        :param active: The active of this StudySearchRequest.  # noqa: E501
        :type active: bool
        :param germplasm_db_ids: The germplasm_db_ids of this StudySearchRequest.  # noqa: E501
        :type germplasm_db_ids: List[str]
        :param location_db_ids: The location_db_ids of this StudySearchRequest.  # noqa: E501
        :type location_db_ids: List[str]
        :param observation_variable_db_ids: The observation_variable_db_ids of this StudySearchRequest.  # noqa: E501
        :type observation_variable_db_ids: List[str]
        :param page: The page of this StudySearchRequest.  # noqa: E501
        :type page: int
        :param page_size: The page_size of this StudySearchRequest.  # noqa: E501
        :type page_size: int
        :param program_db_ids: The program_db_ids of this StudySearchRequest.  # noqa: E501
        :type program_db_ids: List[str]
        :param program_names: The program_names of this StudySearchRequest.  # noqa: E501
        :type program_names: List[str]
        :param season_db_id: The season_db_id of this StudySearchRequest.  # noqa: E501
        :type season_db_id: List[str]
        :param sort_by: The sort_by of this StudySearchRequest.  # noqa: E501
        :type sort_by: str
        :param sort_order: The sort_order of this StudySearchRequest.  # noqa: E501
        :type sort_order: str
        :param study_db_ids: The study_db_ids of this StudySearchRequest.  # noqa: E501
        :type study_db_ids: List[str]
        :param study_locations: The study_locations of this StudySearchRequest.  # noqa: E501
        :type study_locations: List[str]
        :param study_names: The study_names of this StudySearchRequest.  # noqa: E501
        :type study_names: List[str]
        :param study_type: The study_type of this StudySearchRequest.  # noqa: E501
        :type study_type: str
        :param trial_db_ids: The trial_db_ids of this StudySearchRequest.  # noqa: E501
        :type trial_db_ids: List[str]
        """
        self.swagger_types = {
            'active': bool,
            'germplasm_db_ids': List[str],
            'location_db_ids': List[str],
            'observation_variable_db_ids': List[str],
            'page': int,
            'page_size': int,
            'program_db_ids': List[str],
            'program_names': List[str],
            'season_db_id': List[str],
            'sort_by': str,
            'sort_order': str,
            'study_db_ids': List[str],
            'study_locations': List[str],
            'study_names': List[str],
            'study_type': str,
            'trial_db_ids': List[str]
        }

        self.attribute_map = {
            'active': 'active',
            'germplasm_db_ids': 'germplasmDbIds',
            'location_db_ids': 'locationDbIds',
            'observation_variable_db_ids': 'observationVariableDbIds',
            'page': 'page',
            'page_size': 'pageSize',
            'program_db_ids': 'programDbIds',
            'program_names': 'programNames',
            'season_db_id': 'seasonDbId',
            'sort_by': 'sortBy',
            'sort_order': 'sortOrder',
            'study_db_ids': 'studyDbIds',
            'study_locations': 'studyLocations',
            'study_names': 'studyNames',
            'study_type': 'studyType',
            'trial_db_ids': 'trialDbIds'
        }

        self._active = active
        self._germplasm_db_ids = germplasm_db_ids
        self._location_db_ids = location_db_ids
        self._observation_variable_db_ids = observation_variable_db_ids
        self._page = page
        self._page_size = page_size
        self._program_db_ids = program_db_ids
        self._program_names = program_names
        self._season_db_id = season_db_id
        self._sort_by = sort_by
        self._sort_order = sort_order
        self._study_db_ids = study_db_ids
        self._study_locations = study_locations
        self._study_names = study_names
        self._study_type = study_type
        self._trial_db_ids = trial_db_ids

    @classmethod
    def from_dict(cls, dikt) -> 'StudySearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The studySearchRequest of this StudySearchRequest.  # noqa: E501
        :rtype: StudySearchRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this StudySearchRequest.

        Is this study currently active  # noqa: E501

        :return: The active of this StudySearchRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this StudySearchRequest.

        Is this study currently active  # noqa: E501

        :param active: The active of this StudySearchRequest.
        :type active: bool
        """

        self._active = active

    @property
    def germplasm_db_ids(self) -> List[str]:
        """Gets the germplasm_db_ids of this StudySearchRequest.

        List of IDs which uniquely identify germplasm  # noqa: E501

        :return: The germplasm_db_ids of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._germplasm_db_ids

    @germplasm_db_ids.setter
    def germplasm_db_ids(self, germplasm_db_ids: List[str]):
        """Sets the germplasm_db_ids of this StudySearchRequest.

        List of IDs which uniquely identify germplasm  # noqa: E501

        :param germplasm_db_ids: The germplasm_db_ids of this StudySearchRequest.
        :type germplasm_db_ids: List[str]
        """

        self._germplasm_db_ids = germplasm_db_ids

    @property
    def location_db_ids(self) -> List[str]:
        """Gets the location_db_ids of this StudySearchRequest.

        List of location identifiers to filter search results  # noqa: E501

        :return: The location_db_ids of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._location_db_ids

    @location_db_ids.setter
    def location_db_ids(self, location_db_ids: List[str]):
        """Sets the location_db_ids of this StudySearchRequest.

        List of location identifiers to filter search results  # noqa: E501

        :param location_db_ids: The location_db_ids of this StudySearchRequest.
        :type location_db_ids: List[str]
        """

        self._location_db_ids = location_db_ids

    @property
    def observation_variable_db_ids(self) -> List[str]:
        """Gets the observation_variable_db_ids of this StudySearchRequest.

        List of observation variable IDs to search for  # noqa: E501

        :return: The observation_variable_db_ids of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._observation_variable_db_ids

    @observation_variable_db_ids.setter
    def observation_variable_db_ids(self, observation_variable_db_ids: List[str]):
        """Sets the observation_variable_db_ids of this StudySearchRequest.

        List of observation variable IDs to search for  # noqa: E501

        :param observation_variable_db_ids: The observation_variable_db_ids of this StudySearchRequest.
        :type observation_variable_db_ids: List[str]
        """

        self._observation_variable_db_ids = observation_variable_db_ids

    @property
    def page(self) -> int:
        """Gets the page of this StudySearchRequest.

        Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.  # noqa: E501

        :return: The page of this StudySearchRequest.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this StudySearchRequest.

        Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.  # noqa: E501

        :param page: The page of this StudySearchRequest.
        :type page: int
        """

        self._page = page

    @property
    def page_size(self) -> int:
        """Gets the page_size of this StudySearchRequest.

        The maximum number of items to return per page of the \"data\" array. Default is 1000.  # noqa: E501

        :return: The page_size of this StudySearchRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: int):
        """Sets the page_size of this StudySearchRequest.

        The maximum number of items to return per page of the \"data\" array. Default is 1000.  # noqa: E501

        :param page_size: The page_size of this StudySearchRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def program_db_ids(self) -> List[str]:
        """Gets the program_db_ids of this StudySearchRequest.

        List of program identifiers to filter search results  # noqa: E501

        :return: The program_db_ids of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._program_db_ids

    @program_db_ids.setter
    def program_db_ids(self, program_db_ids: List[str]):
        """Sets the program_db_ids of this StudySearchRequest.

        List of program identifiers to filter search results  # noqa: E501

        :param program_db_ids: The program_db_ids of this StudySearchRequest.
        :type program_db_ids: List[str]
        """

        self._program_db_ids = program_db_ids

    @property
    def program_names(self) -> List[str]:
        """Gets the program_names of this StudySearchRequest.

        List of program names to filter search results  # noqa: E501

        :return: The program_names of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._program_names

    @program_names.setter
    def program_names(self, program_names: List[str]):
        """Sets the program_names of this StudySearchRequest.

        List of program names to filter search results  # noqa: E501

        :param program_names: The program_names of this StudySearchRequest.
        :type program_names: List[str]
        """

        self._program_names = program_names

    @property
    def season_db_id(self) -> List[str]:
        """Gets the season_db_id of this StudySearchRequest.

        The ID which uniquely identifies a season  # noqa: E501

        :return: The season_db_id of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._season_db_id

    @season_db_id.setter
    def season_db_id(self, season_db_id: List[str]):
        """Sets the season_db_id of this StudySearchRequest.

        The ID which uniquely identifies a season  # noqa: E501

        :param season_db_id: The season_db_id of this StudySearchRequest.
        :type season_db_id: List[str]
        """

        self._season_db_id = season_db_id

    @property
    def sort_by(self) -> str:
        """Gets the sort_by of this StudySearchRequest.

        Name of one of the fields within the study object on which results can be sorted  # noqa: E501

        :return: The sort_by of this StudySearchRequest.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by: str):
        """Sets the sort_by of this StudySearchRequest.

        Name of one of the fields within the study object on which results can be sorted  # noqa: E501

        :param sort_by: The sort_by of this StudySearchRequest.
        :type sort_by: str
        """
        allowed_values = ["studyDbId", "trialDbId", "programDbId", "locationDbId", "seasonDbId", "studyType", "studyName", "studyLocation", "programName", "germplasmDbId", "observationVariableDbId"]  # noqa: E501
        if sort_by not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by

    @property
    def sort_order(self) -> str:
        """Gets the sort_order of this StudySearchRequest.

        Order results should be sorted. ex. \"ASC\" or \"DESC\"  # noqa: E501

        :return: The sort_order of this StudySearchRequest.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: str):
        """Sets the sort_order of this StudySearchRequest.

        Order results should be sorted. ex. \"ASC\" or \"DESC\"  # noqa: E501

        :param sort_order: The sort_order of this StudySearchRequest.
        :type sort_order: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def study_db_ids(self) -> List[str]:
        """Gets the study_db_ids of this StudySearchRequest.

        List of study identifiers to search for  # noqa: E501

        :return: The study_db_ids of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._study_db_ids

    @study_db_ids.setter
    def study_db_ids(self, study_db_ids: List[str]):
        """Sets the study_db_ids of this StudySearchRequest.

        List of study identifiers to search for  # noqa: E501

        :param study_db_ids: The study_db_ids of this StudySearchRequest.
        :type study_db_ids: List[str]
        """

        self._study_db_ids = study_db_ids

    @property
    def study_locations(self) -> List[str]:
        """Gets the study_locations of this StudySearchRequest.

        List of location names to filter search results  # noqa: E501

        :return: The study_locations of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._study_locations

    @study_locations.setter
    def study_locations(self, study_locations: List[str]):
        """Sets the study_locations of this StudySearchRequest.

        List of location names to filter search results  # noqa: E501

        :param study_locations: The study_locations of this StudySearchRequest.
        :type study_locations: List[str]
        """

        self._study_locations = study_locations

    @property
    def study_names(self) -> List[str]:
        """Gets the study_names of this StudySearchRequest.

        List of study names to filter search results  # noqa: E501

        :return: The study_names of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._study_names

    @study_names.setter
    def study_names(self, study_names: List[str]):
        """Sets the study_names of this StudySearchRequest.

        List of study names to filter search results  # noqa: E501

        :param study_names: The study_names of this StudySearchRequest.
        :type study_names: List[str]
        """

        self._study_names = study_names

    @property
    def study_type(self) -> str:
        """Gets the study_type of this StudySearchRequest.

        The type of study being performed. ex. \"Yeald Trial\", etc  # noqa: E501

        :return: The study_type of this StudySearchRequest.
        :rtype: str
        """
        return self._study_type

    @study_type.setter
    def study_type(self, study_type: str):
        """Sets the study_type of this StudySearchRequest.

        The type of study being performed. ex. \"Yeald Trial\", etc  # noqa: E501

        :param study_type: The study_type of this StudySearchRequest.
        :type study_type: str
        """

        self._study_type = study_type

    @property
    def trial_db_ids(self) -> List[str]:
        """Gets the trial_db_ids of this StudySearchRequest.

        List of trial identifiers to filter search results  # noqa: E501

        :return: The trial_db_ids of this StudySearchRequest.
        :rtype: List[str]
        """
        return self._trial_db_ids

    @trial_db_ids.setter
    def trial_db_ids(self, trial_db_ids: List[str]):
        """Sets the trial_db_ids of this StudySearchRequest.

        List of trial identifiers to filter search results  # noqa: E501

        :param trial_db_ids: The trial_db_ids of this StudySearchRequest.
        :type trial_db_ids: List[str]
        """

        self._trial_db_ids = trial_db_ids
