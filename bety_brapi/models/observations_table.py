# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class ObservationsTable(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, data: List[List[str]]=None, header_row: List[str]=None, observation_variable_db_ids: List[str]=None, observation_variable_names: List[str]=None):  # noqa: E501
        """ObservationsTable - a model defined in Swagger

        :param data: The data of this ObservationsTable.  # noqa: E501
        :type data: List[List[str]]
        :param header_row: The header_row of this ObservationsTable.  # noqa: E501
        :type header_row: List[str]
        :param observation_variable_db_ids: The observation_variable_db_ids of this ObservationsTable.  # noqa: E501
        :type observation_variable_db_ids: List[str]
        :param observation_variable_names: The observation_variable_names of this ObservationsTable.  # noqa: E501
        :type observation_variable_names: List[str]
        """
        self.swagger_types = {
            'data': List[List[str]],
            'header_row': List[str],
            'observation_variable_db_ids': List[str],
            'observation_variable_names': List[str]
        }

        self.attribute_map = {
            'data': 'data',
            'header_row': 'headerRow',
            'observation_variable_db_ids': 'observationVariableDbIds',
            'observation_variable_names': 'observationVariableNames'
        }

        self._data = data
        self._header_row = header_row
        self._observation_variable_db_ids = observation_variable_db_ids
        self._observation_variable_names = observation_variable_names

    @classmethod
    def from_dict(cls, dikt) -> 'ObservationsTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The observationsTable of this ObservationsTable.  # noqa: E501
        :rtype: ObservationsTable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[List[str]]:
        """Gets the data of this ObservationsTable.

        Matrix of observation data recorded for different observation variables across different observation units  # noqa: E501

        :return: The data of this ObservationsTable.
        :rtype: List[List[str]]
        """
        return self._data

    @data.setter
    def data(self, data: List[List[str]]):
        """Sets the data of this ObservationsTable.

        Matrix of observation data recorded for different observation variables across different observation units  # noqa: E501

        :param data: The data of this ObservationsTable.
        :type data: List[List[str]]
        """

        self._data = data

    @property
    def header_row(self) -> List[str]:
        """Gets the header_row of this ObservationsTable.

        The header row describing observation unit fields. Append 'observationVariableDbIds' for complete header row of the table. This array should contain any or all of the following strings; year, studyDbId, studyName, locationDbId, locationName, germplasmDbId, germplasmName, observationUnitDbId, plotNumber, replicate, blockNumber, observationTimestamp (DEPRECATED in V1.3), entryType, X, Y  # noqa: E501

        :return: The header_row of this ObservationsTable.
        :rtype: List[str]
        """
        return self._header_row

    @header_row.setter
    def header_row(self, header_row: List[str]):
        """Sets the header_row of this ObservationsTable.

        The header row describing observation unit fields. Append 'observationVariableDbIds' for complete header row of the table. This array should contain any or all of the following strings; year, studyDbId, studyName, locationDbId, locationName, germplasmDbId, germplasmName, observationUnitDbId, plotNumber, replicate, blockNumber, observationTimestamp (DEPRECATED in V1.3), entryType, X, Y  # noqa: E501

        :param header_row: The header_row of this ObservationsTable.
        :type header_row: List[str]
        """
        allowed_values = ["year", "studyDbId", "studyName", "locationDbId", "locationName", "germplasmDbId", "germplasmName", "observationUnitDbId", "plotNumber", "replicate", "blockNumber", "observationTimestamp", "entryType", "X", "Y"]  # noqa: E501
        if not set(header_row).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `header_row` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(header_row) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._header_row = header_row

    @property
    def observation_variable_db_ids(self) -> List[str]:
        """Gets the observation_variable_db_ids of this ObservationsTable.

        The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for comlete header row.  # noqa: E501

        :return: The observation_variable_db_ids of this ObservationsTable.
        :rtype: List[str]
        """
        return self._observation_variable_db_ids

    @observation_variable_db_ids.setter
    def observation_variable_db_ids(self, observation_variable_db_ids: List[str]):
        """Sets the observation_variable_db_ids of this ObservationsTable.

        The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for comlete header row.  # noqa: E501

        :param observation_variable_db_ids: The observation_variable_db_ids of this ObservationsTable.
        :type observation_variable_db_ids: List[str]
        """

        self._observation_variable_db_ids = observation_variable_db_ids

    @property
    def observation_variable_names(self) -> List[str]:
        """Gets the observation_variable_names of this ObservationsTable.

        The list of observation variable names which have values recorded for them in the data matrix. Order should match 'observationVariableDbIds'.  # noqa: E501

        :return: The observation_variable_names of this ObservationsTable.
        :rtype: List[str]
        """
        return self._observation_variable_names

    @observation_variable_names.setter
    def observation_variable_names(self, observation_variable_names: List[str]):
        """Sets the observation_variable_names of this ObservationsTable.

        The list of observation variable names which have values recorded for them in the data matrix. Order should match 'observationVariableDbIds'.  # noqa: E501

        :param observation_variable_names: The observation_variable_names of this ObservationsTable.
        :type observation_variable_names: List[str]
        """

        self._observation_variable_names = observation_variable_names
