# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class Trait(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, alternative_abbreviations: List[str]=None, attribute: str=None, _class: str=None, description: str=None, entity: str=None, main_abbreviation: str=None, name: str=None, status: str=None, synonyms: List[str]=None, trait_db_id: str=None, trait_name: str=None, xref: str=None):  # noqa: E501
        """Trait - a model defined in Swagger

        :param alternative_abbreviations: The alternative_abbreviations of this Trait.  # noqa: E501
        :type alternative_abbreviations: List[str]
        :param attribute: The attribute of this Trait.  # noqa: E501
        :type attribute: str
        :param _class: The _class of this Trait.  # noqa: E501
        :type _class: str
        :param description: The description of this Trait.  # noqa: E501
        :type description: str
        :param entity: The entity of this Trait.  # noqa: E501
        :type entity: str
        :param main_abbreviation: The main_abbreviation of this Trait.  # noqa: E501
        :type main_abbreviation: str
        :param name: The name of this Trait.  # noqa: E501
        :type name: str
        :param status: The status of this Trait.  # noqa: E501
        :type status: str
        :param synonyms: The synonyms of this Trait.  # noqa: E501
        :type synonyms: List[str]
        :param trait_db_id: The trait_db_id of this Trait.  # noqa: E501
        :type trait_db_id: str
        :param trait_name: The trait_name of this Trait.  # noqa: E501
        :type trait_name: str
        :param xref: The xref of this Trait.  # noqa: E501
        :type xref: str
        """
        self.swagger_types = {
            'alternative_abbreviations': List[str],
            'attribute': str,
            '_class': str,
            'description': str,
            'entity': str,
            'main_abbreviation': str,
            'name': str,
            'status': str,
            'synonyms': List[str],
            'trait_db_id': str,
            'trait_name': str,
            'xref': str
        }

        self.attribute_map = {
            'alternative_abbreviations': 'alternativeAbbreviations',
            'attribute': 'attribute',
            '_class': 'class',
            'description': 'description',
            'entity': 'entity',
            'main_abbreviation': 'mainAbbreviation',
            'name': 'name',
            'status': 'status',
            'synonyms': 'synonyms',
            'trait_db_id': 'traitDbId',
            'trait_name': 'traitName',
            'xref': 'xref'
        }

        self._alternative_abbreviations = alternative_abbreviations
        self._attribute = attribute
        self.__class = _class
        self._description = description
        self._entity = entity
        self._main_abbreviation = main_abbreviation
        self._name = name
        self._status = status
        self._synonyms = synonyms
        self._trait_db_id = trait_db_id
        self._trait_name = trait_name
        self._xref = xref

    @classmethod
    def from_dict(cls, dikt) -> 'Trait':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The trait of this Trait.  # noqa: E501
        :rtype: Trait
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternative_abbreviations(self) -> List[str]:
        """Gets the alternative_abbreviations of this Trait.

        Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention  # noqa: E501

        :return: The alternative_abbreviations of this Trait.
        :rtype: List[str]
        """
        return self._alternative_abbreviations

    @alternative_abbreviations.setter
    def alternative_abbreviations(self, alternative_abbreviations: List[str]):
        """Sets the alternative_abbreviations of this Trait.

        Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention  # noqa: E501

        :param alternative_abbreviations: The alternative_abbreviations of this Trait.
        :type alternative_abbreviations: List[str]
        """

        self._alternative_abbreviations = alternative_abbreviations

    @property
    def attribute(self) -> str:
        """Gets the attribute of this Trait.

        A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"  # noqa: E501

        :return: The attribute of this Trait.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute: str):
        """Sets the attribute of this Trait.

        A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"  # noqa: E501

        :param attribute: The attribute of this Trait.
        :type attribute: str
        """

        self._attribute = attribute

    @property
    def _class(self) -> str:
        """Gets the _class of this Trait.

        Trait class. (examples: \"morphological trait\", \"phenological trait\", \"agronomical trait\", \"physiological trait\", \"abiotic stress trait\", \"biotic stress trait\", \"biochemical trait\", \"quality traits trait\", \"fertility trait\", etc.)  # noqa: E501

        :return: The _class of this Trait.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this Trait.

        Trait class. (examples: \"morphological trait\", \"phenological trait\", \"agronomical trait\", \"physiological trait\", \"abiotic stress trait\", \"biotic stress trait\", \"biochemical trait\", \"quality traits trait\", \"fertility trait\", etc.)  # noqa: E501

        :param _class: The _class of this Trait.
        :type _class: str
        """

        self.__class = _class

    @property
    def description(self) -> str:
        """Gets the description of this Trait.

        The description of a trait  # noqa: E501

        :return: The description of this Trait.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Trait.

        The description of a trait  # noqa: E501

        :param description: The description of this Trait.
        :type description: str
        """

        self._description = description

    @property
    def entity(self) -> str:
        """Gets the entity of this Trait.

        A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"  # noqa: E501

        :return: The entity of this Trait.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity: str):
        """Sets the entity of this Trait.

        A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"  # noqa: E501

        :param entity: The entity of this Trait.
        :type entity: str
        """

        self._entity = entity

    @property
    def main_abbreviation(self) -> str:
        """Gets the main_abbreviation of this Trait.

        Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")  # noqa: E501

        :return: The main_abbreviation of this Trait.
        :rtype: str
        """
        return self._main_abbreviation

    @main_abbreviation.setter
    def main_abbreviation(self, main_abbreviation: str):
        """Sets the main_abbreviation of this Trait.

        Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")  # noqa: E501

        :param main_abbreviation: The main_abbreviation of this Trait.
        :type main_abbreviation: str
        """

        self._main_abbreviation = main_abbreviation

    @property
    def name(self) -> str:
        """Gets the name of this Trait.

        DEPRECATED in v1.3 - Use \"traitName\"  # noqa: E501

        :return: The name of this Trait.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Trait.

        DEPRECATED in v1.3 - Use \"traitName\"  # noqa: E501

        :param name: The name of this Trait.
        :type name: str
        """

        self._name = name

    @property
    def status(self) -> str:
        """Gets the status of this Trait.

        Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)  # noqa: E501

        :return: The status of this Trait.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Trait.

        Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)  # noqa: E501

        :param status: The status of this Trait.
        :type status: str
        """

        self._status = status

    @property
    def synonyms(self) -> List[str]:
        """Gets the synonyms of this Trait.

        Other trait names  # noqa: E501

        :return: The synonyms of this Trait.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms: List[str]):
        """Sets the synonyms of this Trait.

        Other trait names  # noqa: E501

        :param synonyms: The synonyms of this Trait.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def trait_db_id(self) -> str:
        """Gets the trait_db_id of this Trait.

        The ID which uniquely identifies a trait  # noqa: E501

        :return: The trait_db_id of this Trait.
        :rtype: str
        """
        return self._trait_db_id

    @trait_db_id.setter
    def trait_db_id(self, trait_db_id: str):
        """Sets the trait_db_id of this Trait.

        The ID which uniquely identifies a trait  # noqa: E501

        :param trait_db_id: The trait_db_id of this Trait.
        :type trait_db_id: str
        """

        self._trait_db_id = trait_db_id

    @property
    def trait_name(self) -> str:
        """Gets the trait_name of this Trait.

        The human readable name of a trait  # noqa: E501

        :return: The trait_name of this Trait.
        :rtype: str
        """
        return self._trait_name

    @trait_name.setter
    def trait_name(self, trait_name: str):
        """Sets the trait_name of this Trait.

        The human readable name of a trait  # noqa: E501

        :param trait_name: The trait_name of this Trait.
        :type trait_name: str
        """

        self._trait_name = trait_name

    @property
    def xref(self) -> str:
        """Gets the xref of this Trait.

        Cross reference of the trait to an external ontology or database term e.g., Xref to a trait ontology (TO) term  # noqa: E501

        :return: The xref of this Trait.
        :rtype: str
        """
        return self._xref

    @xref.setter
    def xref(self, xref: str):
        """Sets the xref of this Trait.

        Cross reference of the trait to an external ontology or database term e.g., Xref to a trait ontology (TO) term  # noqa: E501

        :param xref: The xref of this Trait.
        :type xref: str
        """

        self._xref = xref
