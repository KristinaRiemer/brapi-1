# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.valid_values import ValidValues  # noqa: F401,E501
from bety_brapi import util


class Scale(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, decimal_places: int=None, name: str=None, scale_db_id: str=None, scale_name: str=None, valid_values: ValidValues=None, xref: str=None):  # noqa: E501
        """Scale - a model defined in Swagger

        :param data_type: The data_type of this Scale.  # noqa: E501
        :type data_type: str
        :param decimal_places: The decimal_places of this Scale.  # noqa: E501
        :type decimal_places: int
        :param name: The name of this Scale.  # noqa: E501
        :type name: str
        :param scale_db_id: The scale_db_id of this Scale.  # noqa: E501
        :type scale_db_id: str
        :param scale_name: The scale_name of this Scale.  # noqa: E501
        :type scale_name: str
        :param valid_values: The valid_values of this Scale.  # noqa: E501
        :type valid_values: ValidValues
        :param xref: The xref of this Scale.  # noqa: E501
        :type xref: str
        """
        self.swagger_types = {
            'data_type': str,
            'decimal_places': int,
            'name': str,
            'scale_db_id': str,
            'scale_name': str,
            'valid_values': ValidValues,
            'xref': str
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'decimal_places': 'decimalPlaces',
            'name': 'name',
            'scale_db_id': 'scaleDbId',
            'scale_name': 'scaleName',
            'valid_values': 'validValues',
            'xref': 'xref'
        }

        self._data_type = data_type
        self._decimal_places = decimal_places
        self._name = name
        self._scale_db_id = scale_db_id
        self._scale_name = scale_name
        self._valid_values = valid_values
        self._xref = xref

    @classmethod
    def from_dict(cls, dikt) -> 'Scale':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The scale of this Scale.  # noqa: E501
        :rtype: Scale
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self) -> str:
        """Gets the data_type of this Scale.

        Class of the scale, entries can be \"Numerical\", \"Nominal\", \"Ordinal\", \"Text\", \"Code\", \"Time\", \"Duration\"  # noqa: E501

        :return: The data_type of this Scale.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: str):
        """Sets the data_type of this Scale.

        Class of the scale, entries can be \"Numerical\", \"Nominal\", \"Ordinal\", \"Text\", \"Code\", \"Time\", \"Duration\"  # noqa: E501

        :param data_type: The data_type of this Scale.
        :type data_type: str
        """
        allowed_values = ["Numerical", "Nominal", "Ordinal", "Text", "Code", "Time", "Duration"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def decimal_places(self) -> int:
        """Gets the decimal_places of this Scale.

        For numerical, number of decimal places to be reported  # noqa: E501

        :return: The decimal_places of this Scale.
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places: int):
        """Sets the decimal_places of this Scale.

        For numerical, number of decimal places to be reported  # noqa: E501

        :param decimal_places: The decimal_places of this Scale.
        :type decimal_places: int
        """

        self._decimal_places = decimal_places

    @property
    def name(self) -> str:
        """Gets the name of this Scale.

        DEPRECATED in v1.3 - Use \"scaleName\"  # noqa: E501

        :return: The name of this Scale.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Scale.

        DEPRECATED in v1.3 - Use \"scaleName\"  # noqa: E501

        :param name: The name of this Scale.
        :type name: str
        """

        self._name = name

    @property
    def scale_db_id(self) -> str:
        """Gets the scale_db_id of this Scale.

        Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.  # noqa: E501

        :return: The scale_db_id of this Scale.
        :rtype: str
        """
        return self._scale_db_id

    @scale_db_id.setter
    def scale_db_id(self, scale_db_id: str):
        """Sets the scale_db_id of this Scale.

        Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.  # noqa: E501

        :param scale_db_id: The scale_db_id of this Scale.
        :type scale_db_id: str
        """

        self._scale_db_id = scale_db_id

    @property
    def scale_name(self) -> str:
        """Gets the scale_name of this Scale.

        Name of the scale  # noqa: E501

        :return: The scale_name of this Scale.
        :rtype: str
        """
        return self._scale_name

    @scale_name.setter
    def scale_name(self, scale_name: str):
        """Sets the scale_name of this Scale.

        Name of the scale  # noqa: E501

        :param scale_name: The scale_name of this Scale.
        :type scale_name: str
        """

        self._scale_name = scale_name

    @property
    def valid_values(self) -> ValidValues:
        """Gets the valid_values of this Scale.

        List of valid values expected for non-numeric data  # noqa: E501

        :return: The valid_values of this Scale.
        :rtype: ValidValues
        """
        return self._valid_values

    @valid_values.setter
    def valid_values(self, valid_values: ValidValues):
        """Sets the valid_values of this Scale.

        List of valid values expected for non-numeric data  # noqa: E501

        :param valid_values: The valid_values of this Scale.
        :type valid_values: ValidValues
        """

        self._valid_values = valid_values

    @property
    def xref(self) -> str:
        """Gets the xref of this Scale.

        Cross reference to the scale, for example to a unit ontology such as UO or to a unit of an external major database  # noqa: E501

        :return: The xref of this Scale.
        :rtype: str
        """
        return self._xref

    @xref.setter
    def xref(self, xref: str):
        """Sets the xref of this Scale.

        Cross reference to the scale, for example to a unit ontology such as UO or to a unit of an external major database  # noqa: E501

        :param xref: The xref of this Scale.
        :type xref: str
        """

        self._xref = xref
