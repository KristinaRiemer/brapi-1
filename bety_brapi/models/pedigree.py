# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.pedigree_siblings import PedigreeSiblings  # noqa: F401,E501
from bety_brapi import util


class Pedigree(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, crossing_plan: str=None, crossing_year: str=None, default_display_name: str=None, family_code: str=None, germplasm_db_id: str=None, parent1_db_id: str=None, parent1_id: str=None, parent1_name: str=None, parent1_type: str=None, parent2_db_id: str=None, parent2_id: str=None, parent2_name: str=None, parent2_type: str=None, pedigree: str=None, siblings: List[PedigreeSiblings]=None):  # noqa: E501
        """Pedigree - a model defined in Swagger

        :param crossing_plan: The crossing_plan of this Pedigree.  # noqa: E501
        :type crossing_plan: str
        :param crossing_year: The crossing_year of this Pedigree.  # noqa: E501
        :type crossing_year: str
        :param default_display_name: The default_display_name of this Pedigree.  # noqa: E501
        :type default_display_name: str
        :param family_code: The family_code of this Pedigree.  # noqa: E501
        :type family_code: str
        :param germplasm_db_id: The germplasm_db_id of this Pedigree.  # noqa: E501
        :type germplasm_db_id: str
        :param parent1_db_id: The parent1_db_id of this Pedigree.  # noqa: E501
        :type parent1_db_id: str
        :param parent1_id: The parent1_id of this Pedigree.  # noqa: E501
        :type parent1_id: str
        :param parent1_name: The parent1_name of this Pedigree.  # noqa: E501
        :type parent1_name: str
        :param parent1_type: The parent1_type of this Pedigree.  # noqa: E501
        :type parent1_type: str
        :param parent2_db_id: The parent2_db_id of this Pedigree.  # noqa: E501
        :type parent2_db_id: str
        :param parent2_id: The parent2_id of this Pedigree.  # noqa: E501
        :type parent2_id: str
        :param parent2_name: The parent2_name of this Pedigree.  # noqa: E501
        :type parent2_name: str
        :param parent2_type: The parent2_type of this Pedigree.  # noqa: E501
        :type parent2_type: str
        :param pedigree: The pedigree of this Pedigree.  # noqa: E501
        :type pedigree: str
        :param siblings: The siblings of this Pedigree.  # noqa: E501
        :type siblings: List[PedigreeSiblings]
        """
        self.swagger_types = {
            'crossing_plan': str,
            'crossing_year': str,
            'default_display_name': str,
            'family_code': str,
            'germplasm_db_id': str,
            'parent1_db_id': str,
            'parent1_id': str,
            'parent1_name': str,
            'parent1_type': str,
            'parent2_db_id': str,
            'parent2_id': str,
            'parent2_name': str,
            'parent2_type': str,
            'pedigree': str,
            'siblings': List[PedigreeSiblings]
        }

        self.attribute_map = {
            'crossing_plan': 'crossingPlan',
            'crossing_year': 'crossingYear',
            'default_display_name': 'defaultDisplayName',
            'family_code': 'familyCode',
            'germplasm_db_id': 'germplasmDbId',
            'parent1_db_id': 'parent1DbId',
            'parent1_id': 'parent1Id',
            'parent1_name': 'parent1Name',
            'parent1_type': 'parent1Type',
            'parent2_db_id': 'parent2DbId',
            'parent2_id': 'parent2Id',
            'parent2_name': 'parent2Name',
            'parent2_type': 'parent2Type',
            'pedigree': 'pedigree',
            'siblings': 'siblings'
        }

        self._crossing_plan = crossing_plan
        self._crossing_year = crossing_year
        self._default_display_name = default_display_name
        self._family_code = family_code
        self._germplasm_db_id = germplasm_db_id
        self._parent1_db_id = parent1_db_id
        self._parent1_id = parent1_id
        self._parent1_name = parent1_name
        self._parent1_type = parent1_type
        self._parent2_db_id = parent2_db_id
        self._parent2_id = parent2_id
        self._parent2_name = parent2_name
        self._parent2_type = parent2_type
        self._pedigree = pedigree
        self._siblings = siblings

    @classmethod
    def from_dict(cls, dikt) -> 'Pedigree':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The pedigree of this Pedigree.  # noqa: E501
        :rtype: Pedigree
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crossing_plan(self) -> str:
        """Gets the crossing_plan of this Pedigree.

        The crossing strategy used to generate this germplasm  # noqa: E501

        :return: The crossing_plan of this Pedigree.
        :rtype: str
        """
        return self._crossing_plan

    @crossing_plan.setter
    def crossing_plan(self, crossing_plan: str):
        """Sets the crossing_plan of this Pedigree.

        The crossing strategy used to generate this germplasm  # noqa: E501

        :param crossing_plan: The crossing_plan of this Pedigree.
        :type crossing_plan: str
        """

        self._crossing_plan = crossing_plan

    @property
    def crossing_year(self) -> str:
        """Gets the crossing_year of this Pedigree.

        The year the parents were originally crossed  # noqa: E501

        :return: The crossing_year of this Pedigree.
        :rtype: str
        """
        return self._crossing_year

    @crossing_year.setter
    def crossing_year(self, crossing_year: str):
        """Sets the crossing_year of this Pedigree.

        The year the parents were originally crossed  # noqa: E501

        :param crossing_year: The crossing_year of this Pedigree.
        :type crossing_year: str
        """

        self._crossing_year = crossing_year

    @property
    def default_display_name(self) -> str:
        """Gets the default_display_name of this Pedigree.

        A human readable name for a germplasm  # noqa: E501

        :return: The default_display_name of this Pedigree.
        :rtype: str
        """
        return self._default_display_name

    @default_display_name.setter
    def default_display_name(self, default_display_name: str):
        """Sets the default_display_name of this Pedigree.

        A human readable name for a germplasm  # noqa: E501

        :param default_display_name: The default_display_name of this Pedigree.
        :type default_display_name: str
        """

        self._default_display_name = default_display_name

    @property
    def family_code(self) -> str:
        """Gets the family_code of this Pedigree.

        The code representing the family  # noqa: E501

        :return: The family_code of this Pedigree.
        :rtype: str
        """
        return self._family_code

    @family_code.setter
    def family_code(self, family_code: str):
        """Sets the family_code of this Pedigree.

        The code representing the family  # noqa: E501

        :param family_code: The family_code of this Pedigree.
        :type family_code: str
        """

        self._family_code = family_code

    @property
    def germplasm_db_id(self) -> str:
        """Gets the germplasm_db_id of this Pedigree.

         The ID which uniquely identifies a germplasm  # noqa: E501

        :return: The germplasm_db_id of this Pedigree.
        :rtype: str
        """
        return self._germplasm_db_id

    @germplasm_db_id.setter
    def germplasm_db_id(self, germplasm_db_id: str):
        """Sets the germplasm_db_id of this Pedigree.

         The ID which uniquely identifies a germplasm  # noqa: E501

        :param germplasm_db_id: The germplasm_db_id of this Pedigree.
        :type germplasm_db_id: str
        """

        self._germplasm_db_id = germplasm_db_id

    @property
    def parent1_db_id(self) -> str:
        """Gets the parent1_db_id of this Pedigree.

        The germplasm DbId of the first parent of this germplasm  # noqa: E501

        :return: The parent1_db_id of this Pedigree.
        :rtype: str
        """
        return self._parent1_db_id

    @parent1_db_id.setter
    def parent1_db_id(self, parent1_db_id: str):
        """Sets the parent1_db_id of this Pedigree.

        The germplasm DbId of the first parent of this germplasm  # noqa: E501

        :param parent1_db_id: The parent1_db_id of this Pedigree.
        :type parent1_db_id: str
        """

        self._parent1_db_id = parent1_db_id

    @property
    def parent1_id(self) -> str:
        """Gets the parent1_id of this Pedigree.

        **Deprecated** use parent1DbId  # noqa: E501

        :return: The parent1_id of this Pedigree.
        :rtype: str
        """
        return self._parent1_id

    @parent1_id.setter
    def parent1_id(self, parent1_id: str):
        """Sets the parent1_id of this Pedigree.

        **Deprecated** use parent1DbId  # noqa: E501

        :param parent1_id: The parent1_id of this Pedigree.
        :type parent1_id: str
        """

        self._parent1_id = parent1_id

    @property
    def parent1_name(self) -> str:
        """Gets the parent1_name of this Pedigree.

        the human readable name of the first parent of this germplasm  # noqa: E501

        :return: The parent1_name of this Pedigree.
        :rtype: str
        """
        return self._parent1_name

    @parent1_name.setter
    def parent1_name(self, parent1_name: str):
        """Sets the parent1_name of this Pedigree.

        the human readable name of the first parent of this germplasm  # noqa: E501

        :param parent1_name: The parent1_name of this Pedigree.
        :type parent1_name: str
        """

        self._parent1_name = parent1_name

    @property
    def parent1_type(self) -> str:
        """Gets the parent1_type of this Pedigree.

        The type of parent the first parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.  # noqa: E501

        :return: The parent1_type of this Pedigree.
        :rtype: str
        """
        return self._parent1_type

    @parent1_type.setter
    def parent1_type(self, parent1_type: str):
        """Sets the parent1_type of this Pedigree.

        The type of parent the first parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.  # noqa: E501

        :param parent1_type: The parent1_type of this Pedigree.
        :type parent1_type: str
        """
        allowed_values = ["MALE", "FEMALE", "SELF", "POPULATION"]  # noqa: E501
        if parent1_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent1_type` ({0}), must be one of {1}"
                .format(parent1_type, allowed_values)
            )

        self._parent1_type = parent1_type

    @property
    def parent2_db_id(self) -> str:
        """Gets the parent2_db_id of this Pedigree.

        The germplasm DbId of the second parent of this germplasm  # noqa: E501

        :return: The parent2_db_id of this Pedigree.
        :rtype: str
        """
        return self._parent2_db_id

    @parent2_db_id.setter
    def parent2_db_id(self, parent2_db_id: str):
        """Sets the parent2_db_id of this Pedigree.

        The germplasm DbId of the second parent of this germplasm  # noqa: E501

        :param parent2_db_id: The parent2_db_id of this Pedigree.
        :type parent2_db_id: str
        """

        self._parent2_db_id = parent2_db_id

    @property
    def parent2_id(self) -> str:
        """Gets the parent2_id of this Pedigree.

        **Deprecated** use parent2DbId  # noqa: E501

        :return: The parent2_id of this Pedigree.
        :rtype: str
        """
        return self._parent2_id

    @parent2_id.setter
    def parent2_id(self, parent2_id: str):
        """Sets the parent2_id of this Pedigree.

        **Deprecated** use parent2DbId  # noqa: E501

        :param parent2_id: The parent2_id of this Pedigree.
        :type parent2_id: str
        """

        self._parent2_id = parent2_id

    @property
    def parent2_name(self) -> str:
        """Gets the parent2_name of this Pedigree.

        The human readable name of the second parent of this germplasm  # noqa: E501

        :return: The parent2_name of this Pedigree.
        :rtype: str
        """
        return self._parent2_name

    @parent2_name.setter
    def parent2_name(self, parent2_name: str):
        """Sets the parent2_name of this Pedigree.

        The human readable name of the second parent of this germplasm  # noqa: E501

        :param parent2_name: The parent2_name of this Pedigree.
        :type parent2_name: str
        """

        self._parent2_name = parent2_name

    @property
    def parent2_type(self) -> str:
        """Gets the parent2_type of this Pedigree.

        The type of parent the second parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.  # noqa: E501

        :return: The parent2_type of this Pedigree.
        :rtype: str
        """
        return self._parent2_type

    @parent2_type.setter
    def parent2_type(self, parent2_type: str):
        """Sets the parent2_type of this Pedigree.

        The type of parent the second parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.  # noqa: E501

        :param parent2_type: The parent2_type of this Pedigree.
        :type parent2_type: str
        """
        allowed_values = ["MALE", "FEMALE", "SELF", "POPULATION"]  # noqa: E501
        if parent2_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent2_type` ({0}), must be one of {1}"
                .format(parent2_type, allowed_values)
            )

        self._parent2_type = parent2_type

    @property
    def pedigree(self) -> str:
        """Gets the pedigree of this Pedigree.

        The string representation of the pedigree.  # noqa: E501

        :return: The pedigree of this Pedigree.
        :rtype: str
        """
        return self._pedigree

    @pedigree.setter
    def pedigree(self, pedigree: str):
        """Sets the pedigree of this Pedigree.

        The string representation of the pedigree.  # noqa: E501

        :param pedigree: The pedigree of this Pedigree.
        :type pedigree: str
        """

        self._pedigree = pedigree

    @property
    def siblings(self) -> List[PedigreeSiblings]:
        """Gets the siblings of this Pedigree.

        List of sibling germplasm   # noqa: E501

        :return: The siblings of this Pedigree.
        :rtype: List[PedigreeSiblings]
        """
        return self._siblings

    @siblings.setter
    def siblings(self, siblings: List[PedigreeSiblings]):
        """Sets the siblings of this Pedigree.

        List of sibling germplasm   # noqa: E501

        :param siblings: The siblings of this Pedigree.
        :type siblings: List[PedigreeSiblings]
        """

        self._siblings = siblings
