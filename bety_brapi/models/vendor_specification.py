# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.vendor_specification_platform import VendorSpecificationPlatform  # noqa: F401,E501
from bety_brapi import util


class VendorSpecification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, additional_info: Dict[str, str]=None, contact_name: str=None, platforms: List[VendorSpecificationPlatform]=None, vendor_address: str=None, vendor_city: str=None, vendor_country: str=None, vendor_description: str=None, vendor_email: str=None, vendor_name: str=None, vendor_phone: str=None, vendor_url: str=None):  # noqa: E501
        """VendorSpecification - a model defined in Swagger

        :param additional_info: The additional_info of this VendorSpecification.  # noqa: E501
        :type additional_info: Dict[str, str]
        :param contact_name: The contact_name of this VendorSpecification.  # noqa: E501
        :type contact_name: str
        :param platforms: The platforms of this VendorSpecification.  # noqa: E501
        :type platforms: List[VendorSpecificationPlatform]
        :param vendor_address: The vendor_address of this VendorSpecification.  # noqa: E501
        :type vendor_address: str
        :param vendor_city: The vendor_city of this VendorSpecification.  # noqa: E501
        :type vendor_city: str
        :param vendor_country: The vendor_country of this VendorSpecification.  # noqa: E501
        :type vendor_country: str
        :param vendor_description: The vendor_description of this VendorSpecification.  # noqa: E501
        :type vendor_description: str
        :param vendor_email: The vendor_email of this VendorSpecification.  # noqa: E501
        :type vendor_email: str
        :param vendor_name: The vendor_name of this VendorSpecification.  # noqa: E501
        :type vendor_name: str
        :param vendor_phone: The vendor_phone of this VendorSpecification.  # noqa: E501
        :type vendor_phone: str
        :param vendor_url: The vendor_url of this VendorSpecification.  # noqa: E501
        :type vendor_url: str
        """
        self.swagger_types = {
            'additional_info': Dict[str, str],
            'contact_name': str,
            'platforms': List[VendorSpecificationPlatform],
            'vendor_address': str,
            'vendor_city': str,
            'vendor_country': str,
            'vendor_description': str,
            'vendor_email': str,
            'vendor_name': str,
            'vendor_phone': str,
            'vendor_url': str
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'contact_name': 'contactName',
            'platforms': 'platforms',
            'vendor_address': 'vendorAddress',
            'vendor_city': 'vendorCity',
            'vendor_country': 'vendorCountry',
            'vendor_description': 'vendorDescription',
            'vendor_email': 'vendorEmail',
            'vendor_name': 'vendorName',
            'vendor_phone': 'vendorPhone',
            'vendor_url': 'vendorURL'
        }

        self._additional_info = additional_info
        self._contact_name = contact_name
        self._platforms = platforms
        self._vendor_address = vendor_address
        self._vendor_city = vendor_city
        self._vendor_country = vendor_country
        self._vendor_description = vendor_description
        self._vendor_email = vendor_email
        self._vendor_name = vendor_name
        self._vendor_phone = vendor_phone
        self._vendor_url = vendor_url

    @classmethod
    def from_dict(cls, dikt) -> 'VendorSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The vendorSpecification of this VendorSpecification.  # noqa: E501
        :rtype: VendorSpecification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_info(self) -> Dict[str, str]:
        """Gets the additional_info of this VendorSpecification.

        Additional arbitrary info  # noqa: E501

        :return: The additional_info of this VendorSpecification.
        :rtype: Dict[str, str]
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info: Dict[str, str]):
        """Sets the additional_info of this VendorSpecification.

        Additional arbitrary info  # noqa: E501

        :param additional_info: The additional_info of this VendorSpecification.
        :type additional_info: Dict[str, str]
        """

        self._additional_info = additional_info

    @property
    def contact_name(self) -> str:
        """Gets the contact_name of this VendorSpecification.

        The name or identifier of the primary vendor contact  # noqa: E501

        :return: The contact_name of this VendorSpecification.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name: str):
        """Sets the contact_name of this VendorSpecification.

        The name or identifier of the primary vendor contact  # noqa: E501

        :param contact_name: The contact_name of this VendorSpecification.
        :type contact_name: str
        """

        self._contact_name = contact_name

    @property
    def platforms(self) -> List[VendorSpecificationPlatform]:
        """Gets the platforms of this VendorSpecification.

        List of platform specifications available at the vendor  # noqa: E501

        :return: The platforms of this VendorSpecification.
        :rtype: List[VendorSpecificationPlatform]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms: List[VendorSpecificationPlatform]):
        """Sets the platforms of this VendorSpecification.

        List of platform specifications available at the vendor  # noqa: E501

        :param platforms: The platforms of this VendorSpecification.
        :type platforms: List[VendorSpecificationPlatform]
        """

        self._platforms = platforms

    @property
    def vendor_address(self) -> str:
        """Gets the vendor_address of this VendorSpecification.

        The street address of the vendor  # noqa: E501

        :return: The vendor_address of this VendorSpecification.
        :rtype: str
        """
        return self._vendor_address

    @vendor_address.setter
    def vendor_address(self, vendor_address: str):
        """Sets the vendor_address of this VendorSpecification.

        The street address of the vendor  # noqa: E501

        :param vendor_address: The vendor_address of this VendorSpecification.
        :type vendor_address: str
        """

        self._vendor_address = vendor_address

    @property
    def vendor_city(self) -> str:
        """Gets the vendor_city of this VendorSpecification.

        The name of the city where the vendor is located  # noqa: E501

        :return: The vendor_city of this VendorSpecification.
        :rtype: str
        """
        return self._vendor_city

    @vendor_city.setter
    def vendor_city(self, vendor_city: str):
        """Sets the vendor_city of this VendorSpecification.

        The name of the city where the vendor is located  # noqa: E501

        :param vendor_city: The vendor_city of this VendorSpecification.
        :type vendor_city: str
        """

        self._vendor_city = vendor_city

    @property
    def vendor_country(self) -> str:
        """Gets the vendor_country of this VendorSpecification.

        The name of the country where the vendor is located  # noqa: E501

        :return: The vendor_country of this VendorSpecification.
        :rtype: str
        """
        return self._vendor_country

    @vendor_country.setter
    def vendor_country(self, vendor_country: str):
        """Sets the vendor_country of this VendorSpecification.

        The name of the country where the vendor is located  # noqa: E501

        :param vendor_country: The vendor_country of this VendorSpecification.
        :type vendor_country: str
        """

        self._vendor_country = vendor_country

    @property
    def vendor_description(self) -> str:
        """Gets the vendor_description of this VendorSpecification.

        A description of the vendor  # noqa: E501

        :return: The vendor_description of this VendorSpecification.
        :rtype: str
        """
        return self._vendor_description

    @vendor_description.setter
    def vendor_description(self, vendor_description: str):
        """Sets the vendor_description of this VendorSpecification.

        A description of the vendor  # noqa: E501

        :param vendor_description: The vendor_description of this VendorSpecification.
        :type vendor_description: str
        """

        self._vendor_description = vendor_description

    @property
    def vendor_email(self) -> str:
        """Gets the vendor_email of this VendorSpecification.

        The primary email address used to contact the vendor  # noqa: E501

        :return: The vendor_email of this VendorSpecification.
        :rtype: str
        """
        return self._vendor_email

    @vendor_email.setter
    def vendor_email(self, vendor_email: str):
        """Sets the vendor_email of this VendorSpecification.

        The primary email address used to contact the vendor  # noqa: E501

        :param vendor_email: The vendor_email of this VendorSpecification.
        :type vendor_email: str
        """

        self._vendor_email = vendor_email

    @property
    def vendor_name(self) -> str:
        """Gets the vendor_name of this VendorSpecification.

        The human readable name of the vendor  # noqa: E501

        :return: The vendor_name of this VendorSpecification.
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name: str):
        """Sets the vendor_name of this VendorSpecification.

        The human readable name of the vendor  # noqa: E501

        :param vendor_name: The vendor_name of this VendorSpecification.
        :type vendor_name: str
        """

        self._vendor_name = vendor_name

    @property
    def vendor_phone(self) -> str:
        """Gets the vendor_phone of this VendorSpecification.

        The primary phone number used to contact the vendor  # noqa: E501

        :return: The vendor_phone of this VendorSpecification.
        :rtype: str
        """
        return self._vendor_phone

    @vendor_phone.setter
    def vendor_phone(self, vendor_phone: str):
        """Sets the vendor_phone of this VendorSpecification.

        The primary phone number used to contact the vendor  # noqa: E501

        :param vendor_phone: The vendor_phone of this VendorSpecification.
        :type vendor_phone: str
        """

        self._vendor_phone = vendor_phone

    @property
    def vendor_url(self) -> str:
        """Gets the vendor_url of this VendorSpecification.

        The primary URL for the vendor  # noqa: E501

        :return: The vendor_url of this VendorSpecification.
        :rtype: str
        """
        return self._vendor_url

    @vendor_url.setter
    def vendor_url(self, vendor_url: str):
        """Sets the vendor_url of this VendorSpecification.

        The primary URL for the vendor  # noqa: E501

        :param vendor_url: The vendor_url of this VendorSpecification.
        :type vendor_url: str
        """

        self._vendor_url = vendor_url
