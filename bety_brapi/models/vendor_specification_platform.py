# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.vendor_specification_platform_deliverables import VendorSpecificationPlatformDeliverables  # noqa: F401,E501
from bety_brapi.models.vendor_specification_platform_statuses import VendorSpecificationPlatformStatuses  # noqa: F401,E501
from bety_brapi.models.vendor_specification_reference_system import VendorSpecificationReferenceSystem  # noqa: F401,E501
from bety_brapi.models.vendor_specification_standard_requirement import VendorSpecificationStandardRequirement  # noqa: F401,E501
from bety_brapi import util


class VendorSpecificationPlatform(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, contact_email: str=None, contact_name: str=None, contact_phone: str=None, deliverables: List[VendorSpecificationPlatformDeliverables]=None, platform_description: str=None, platform_name: str=None, platform_url: str=None, shipping_address: str=None, specific_requirements: object=None, standard_requirements: VendorSpecificationStandardRequirement=None, statuses: List[VendorSpecificationPlatformStatuses]=None, taxonomy_id_system: VendorSpecificationReferenceSystem=None, tissue_id_system: VendorSpecificationReferenceSystem=None):  # noqa: E501
        """VendorSpecificationPlatform - a model defined in Swagger

        :param contact_email: The contact_email of this VendorSpecificationPlatform.  # noqa: E501
        :type contact_email: str
        :param contact_name: The contact_name of this VendorSpecificationPlatform.  # noqa: E501
        :type contact_name: str
        :param contact_phone: The contact_phone of this VendorSpecificationPlatform.  # noqa: E501
        :type contact_phone: str
        :param deliverables: The deliverables of this VendorSpecificationPlatform.  # noqa: E501
        :type deliverables: List[VendorSpecificationPlatformDeliverables]
        :param platform_description: The platform_description of this VendorSpecificationPlatform.  # noqa: E501
        :type platform_description: str
        :param platform_name: The platform_name of this VendorSpecificationPlatform.  # noqa: E501
        :type platform_name: str
        :param platform_url: The platform_url of this VendorSpecificationPlatform.  # noqa: E501
        :type platform_url: str
        :param shipping_address: The shipping_address of this VendorSpecificationPlatform.  # noqa: E501
        :type shipping_address: str
        :param specific_requirements: The specific_requirements of this VendorSpecificationPlatform.  # noqa: E501
        :type specific_requirements: object
        :param standard_requirements: The standard_requirements of this VendorSpecificationPlatform.  # noqa: E501
        :type standard_requirements: VendorSpecificationStandardRequirement
        :param statuses: The statuses of this VendorSpecificationPlatform.  # noqa: E501
        :type statuses: List[VendorSpecificationPlatformStatuses]
        :param taxonomy_id_system: The taxonomy_id_system of this VendorSpecificationPlatform.  # noqa: E501
        :type taxonomy_id_system: VendorSpecificationReferenceSystem
        :param tissue_id_system: The tissue_id_system of this VendorSpecificationPlatform.  # noqa: E501
        :type tissue_id_system: VendorSpecificationReferenceSystem
        """
        self.swagger_types = {
            'contact_email': str,
            'contact_name': str,
            'contact_phone': str,
            'deliverables': List[VendorSpecificationPlatformDeliverables],
            'platform_description': str,
            'platform_name': str,
            'platform_url': str,
            'shipping_address': str,
            'specific_requirements': object,
            'standard_requirements': VendorSpecificationStandardRequirement,
            'statuses': List[VendorSpecificationPlatformStatuses],
            'taxonomy_id_system': VendorSpecificationReferenceSystem,
            'tissue_id_system': VendorSpecificationReferenceSystem
        }

        self.attribute_map = {
            'contact_email': 'contactEmail',
            'contact_name': 'contactName',
            'contact_phone': 'contactPhone',
            'deliverables': 'deliverables',
            'platform_description': 'platformDescription',
            'platform_name': 'platformName',
            'platform_url': 'platformURL',
            'shipping_address': 'shippingAddress',
            'specific_requirements': 'specificRequirements',
            'standard_requirements': 'standardRequirements',
            'statuses': 'statuses',
            'taxonomy_id_system': 'taxonomyIdSystem',
            'tissue_id_system': 'tissueIdSystem'
        }

        self._contact_email = contact_email
        self._contact_name = contact_name
        self._contact_phone = contact_phone
        self._deliverables = deliverables
        self._platform_description = platform_description
        self._platform_name = platform_name
        self._platform_url = platform_url
        self._shipping_address = shipping_address
        self._specific_requirements = specific_requirements
        self._standard_requirements = standard_requirements
        self._statuses = statuses
        self._taxonomy_id_system = taxonomy_id_system
        self._tissue_id_system = tissue_id_system

    @classmethod
    def from_dict(cls, dikt) -> 'VendorSpecificationPlatform':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The vendorSpecificationPlatform of this VendorSpecificationPlatform.  # noqa: E501
        :rtype: VendorSpecificationPlatform
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_email(self) -> str:
        """Gets the contact_email of this VendorSpecificationPlatform.

        The primary email address to contact a particular vendor platform  # noqa: E501

        :return: The contact_email of this VendorSpecificationPlatform.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email: str):
        """Sets the contact_email of this VendorSpecificationPlatform.

        The primary email address to contact a particular vendor platform  # noqa: E501

        :param contact_email: The contact_email of this VendorSpecificationPlatform.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def contact_name(self) -> str:
        """Gets the contact_name of this VendorSpecificationPlatform.

        The name or identifier of the primary vendor platfrom contact  # noqa: E501

        :return: The contact_name of this VendorSpecificationPlatform.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name: str):
        """Sets the contact_name of this VendorSpecificationPlatform.

        The name or identifier of the primary vendor platfrom contact  # noqa: E501

        :param contact_name: The contact_name of this VendorSpecificationPlatform.
        :type contact_name: str
        """

        self._contact_name = contact_name

    @property
    def contact_phone(self) -> str:
        """Gets the contact_phone of this VendorSpecificationPlatform.

        The phone number used to contact the vendor about a particular platform  # noqa: E501

        :return: The contact_phone of this VendorSpecificationPlatform.
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone: str):
        """Sets the contact_phone of this VendorSpecificationPlatform.

        The phone number used to contact the vendor about a particular platform  # noqa: E501

        :param contact_phone: The contact_phone of this VendorSpecificationPlatform.
        :type contact_phone: str
        """

        self._contact_phone = contact_phone

    @property
    def deliverables(self) -> List[VendorSpecificationPlatformDeliverables]:
        """Gets the deliverables of this VendorSpecificationPlatform.

        List of specific deliverables provided by the vendor platform  # noqa: E501

        :return: The deliverables of this VendorSpecificationPlatform.
        :rtype: List[VendorSpecificationPlatformDeliverables]
        """
        return self._deliverables

    @deliverables.setter
    def deliverables(self, deliverables: List[VendorSpecificationPlatformDeliverables]):
        """Sets the deliverables of this VendorSpecificationPlatform.

        List of specific deliverables provided by the vendor platform  # noqa: E501

        :param deliverables: The deliverables of this VendorSpecificationPlatform.
        :type deliverables: List[VendorSpecificationPlatformDeliverables]
        """

        self._deliverables = deliverables

    @property
    def platform_description(self) -> str:
        """Gets the platform_description of this VendorSpecificationPlatform.

        Description of the vendor platform  # noqa: E501

        :return: The platform_description of this VendorSpecificationPlatform.
        :rtype: str
        """
        return self._platform_description

    @platform_description.setter
    def platform_description(self, platform_description: str):
        """Sets the platform_description of this VendorSpecificationPlatform.

        Description of the vendor platform  # noqa: E501

        :param platform_description: The platform_description of this VendorSpecificationPlatform.
        :type platform_description: str
        """

        self._platform_description = platform_description

    @property
    def platform_name(self) -> str:
        """Gets the platform_name of this VendorSpecificationPlatform.

        The human readable name of a platform  # noqa: E501

        :return: The platform_name of this VendorSpecificationPlatform.
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name: str):
        """Sets the platform_name of this VendorSpecificationPlatform.

        The human readable name of a platform  # noqa: E501

        :param platform_name: The platform_name of this VendorSpecificationPlatform.
        :type platform_name: str
        """

        self._platform_name = platform_name

    @property
    def platform_url(self) -> str:
        """Gets the platform_url of this VendorSpecificationPlatform.

        The URL for a vendor platform  # noqa: E501

        :return: The platform_url of this VendorSpecificationPlatform.
        :rtype: str
        """
        return self._platform_url

    @platform_url.setter
    def platform_url(self, platform_url: str):
        """Sets the platform_url of this VendorSpecificationPlatform.

        The URL for a vendor platform  # noqa: E501

        :param platform_url: The platform_url of this VendorSpecificationPlatform.
        :type platform_url: str
        """

        self._platform_url = platform_url

    @property
    def shipping_address(self) -> str:
        """Gets the shipping_address of this VendorSpecificationPlatform.

        The street address for a vendor platform  # noqa: E501

        :return: The shipping_address of this VendorSpecificationPlatform.
        :rtype: str
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address: str):
        """Sets the shipping_address of this VendorSpecificationPlatform.

        The street address for a vendor platform  # noqa: E501

        :param shipping_address: The shipping_address of this VendorSpecificationPlatform.
        :type shipping_address: str
        """

        self._shipping_address = shipping_address

    @property
    def specific_requirements(self) -> object:
        """Gets the specific_requirements of this VendorSpecificationPlatform.

        Additional arbitrary requirements for a particular platform  # noqa: E501

        :return: The specific_requirements of this VendorSpecificationPlatform.
        :rtype: object
        """
        return self._specific_requirements

    @specific_requirements.setter
    def specific_requirements(self, specific_requirements: object):
        """Sets the specific_requirements of this VendorSpecificationPlatform.

        Additional arbitrary requirements for a particular platform  # noqa: E501

        :param specific_requirements: The specific_requirements of this VendorSpecificationPlatform.
        :type specific_requirements: object
        """

        self._specific_requirements = specific_requirements

    @property
    def standard_requirements(self) -> VendorSpecificationStandardRequirement:
        """Gets the standard_requirements of this VendorSpecificationPlatform.

        Set of standard requirements for a vendor platform  # noqa: E501

        :return: The standard_requirements of this VendorSpecificationPlatform.
        :rtype: VendorSpecificationStandardRequirement
        """
        return self._standard_requirements

    @standard_requirements.setter
    def standard_requirements(self, standard_requirements: VendorSpecificationStandardRequirement):
        """Sets the standard_requirements of this VendorSpecificationPlatform.

        Set of standard requirements for a vendor platform  # noqa: E501

        :param standard_requirements: The standard_requirements of this VendorSpecificationPlatform.
        :type standard_requirements: VendorSpecificationStandardRequirement
        """

        self._standard_requirements = standard_requirements

    @property
    def statuses(self) -> List[VendorSpecificationPlatformStatuses]:
        """Gets the statuses of this VendorSpecificationPlatform.

        List of possible status messages for a vendor platform  # noqa: E501

        :return: The statuses of this VendorSpecificationPlatform.
        :rtype: List[VendorSpecificationPlatformStatuses]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses: List[VendorSpecificationPlatformStatuses]):
        """Sets the statuses of this VendorSpecificationPlatform.

        List of possible status messages for a vendor platform  # noqa: E501

        :param statuses: The statuses of this VendorSpecificationPlatform.
        :type statuses: List[VendorSpecificationPlatformStatuses]
        """

        self._statuses = statuses

    @property
    def taxonomy_id_system(self) -> VendorSpecificationReferenceSystem:
        """Gets the taxonomy_id_system of this VendorSpecificationPlatform.

        Details about the systems used to track taxonomies  # noqa: E501

        :return: The taxonomy_id_system of this VendorSpecificationPlatform.
        :rtype: VendorSpecificationReferenceSystem
        """
        return self._taxonomy_id_system

    @taxonomy_id_system.setter
    def taxonomy_id_system(self, taxonomy_id_system: VendorSpecificationReferenceSystem):
        """Sets the taxonomy_id_system of this VendorSpecificationPlatform.

        Details about the systems used to track taxonomies  # noqa: E501

        :param taxonomy_id_system: The taxonomy_id_system of this VendorSpecificationPlatform.
        :type taxonomy_id_system: VendorSpecificationReferenceSystem
        """

        self._taxonomy_id_system = taxonomy_id_system

    @property
    def tissue_id_system(self) -> VendorSpecificationReferenceSystem:
        """Gets the tissue_id_system of this VendorSpecificationPlatform.

        Details about the systems used to track sample IDs  # noqa: E501

        :return: The tissue_id_system of this VendorSpecificationPlatform.
        :rtype: VendorSpecificationReferenceSystem
        """
        return self._tissue_id_system

    @tissue_id_system.setter
    def tissue_id_system(self, tissue_id_system: VendorSpecificationReferenceSystem):
        """Sets the tissue_id_system of this VendorSpecificationPlatform.

        Details about the systems used to track sample IDs  # noqa: E501

        :param tissue_id_system: The tissue_id_system of this VendorSpecificationPlatform.
        :type tissue_id_system: VendorSpecificationReferenceSystem
        """

        self._tissue_id_system = tissue_id_system
