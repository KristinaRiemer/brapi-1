# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.progeny_progeny import ProgenyProgeny  # noqa: F401,E501
from bety_brapi import util


class Progeny(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, default_display_name: str=None, germplasm_db_id: str=None, progeny: List[ProgenyProgeny]=None):  # noqa: E501
        """Progeny - a model defined in Swagger

        :param default_display_name: The default_display_name of this Progeny.  # noqa: E501
        :type default_display_name: str
        :param germplasm_db_id: The germplasm_db_id of this Progeny.  # noqa: E501
        :type germplasm_db_id: str
        :param progeny: The progeny of this Progeny.  # noqa: E501
        :type progeny: List[ProgenyProgeny]
        """
        self.swagger_types = {
            'default_display_name': str,
            'germplasm_db_id': str,
            'progeny': List[ProgenyProgeny]
        }

        self.attribute_map = {
            'default_display_name': 'defaultDisplayName',
            'germplasm_db_id': 'germplasmDbId',
            'progeny': 'progeny'
        }

        self._default_display_name = default_display_name
        self._germplasm_db_id = germplasm_db_id
        self._progeny = progeny

    @classmethod
    def from_dict(cls, dikt) -> 'Progeny':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The progeny of this Progeny.  # noqa: E501
        :rtype: Progeny
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_display_name(self) -> str:
        """Gets the default_display_name of this Progeny.

        A human readable name for a germplasm  # noqa: E501

        :return: The default_display_name of this Progeny.
        :rtype: str
        """
        return self._default_display_name

    @default_display_name.setter
    def default_display_name(self, default_display_name: str):
        """Sets the default_display_name of this Progeny.

        A human readable name for a germplasm  # noqa: E501

        :param default_display_name: The default_display_name of this Progeny.
        :type default_display_name: str
        """

        self._default_display_name = default_display_name

    @property
    def germplasm_db_id(self) -> str:
        """Gets the germplasm_db_id of this Progeny.

         The ID which uniquely identifies a germplasm  # noqa: E501

        :return: The germplasm_db_id of this Progeny.
        :rtype: str
        """
        return self._germplasm_db_id

    @germplasm_db_id.setter
    def germplasm_db_id(self, germplasm_db_id: str):
        """Sets the germplasm_db_id of this Progeny.

         The ID which uniquely identifies a germplasm  # noqa: E501

        :param germplasm_db_id: The germplasm_db_id of this Progeny.
        :type germplasm_db_id: str
        """

        self._germplasm_db_id = germplasm_db_id

    @property
    def progeny(self) -> List[ProgenyProgeny]:
        """Gets the progeny of this Progeny.

        List of germplasm entities which are direct children of this germplasm  # noqa: E501

        :return: The progeny of this Progeny.
        :rtype: List[ProgenyProgeny]
        """
        return self._progeny

    @progeny.setter
    def progeny(self, progeny: List[ProgenyProgeny]):
        """Sets the progeny of this Progeny.

        List of germplasm entities which are direct children of this germplasm  # noqa: E501

        :param progeny: The progeny of this Progeny.
        :type progeny: List[ProgenyProgeny]
        """

        self._progeny = progeny
