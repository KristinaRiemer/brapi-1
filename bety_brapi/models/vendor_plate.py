# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.vendor_plate_file import VendorPlateFile  # noqa: F401,E501
from bety_brapi.models.vendor_sample import VendorSample  # noqa: F401,E501
from bety_brapi import util


class VendorPlate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, client_plate_db_id: str=None, files: List[VendorPlateFile]=None, plate_format: str=None, sample_type: str=None, samples: List[VendorSample]=None, status: str=None, status_time_stamp: datetime=None, vendor_barcode: str=None, vendor_barcode_image_url: str=None, vendor_plate_db_id: str=None, vendor_project_db_id: str=None):  # noqa: E501
        """VendorPlate - a model defined in Swagger

        :param client_plate_db_id: The client_plate_db_id of this VendorPlate.  # noqa: E501
        :type client_plate_db_id: str
        :param files: The files of this VendorPlate.  # noqa: E501
        :type files: List[VendorPlateFile]
        :param plate_format: The plate_format of this VendorPlate.  # noqa: E501
        :type plate_format: str
        :param sample_type: The sample_type of this VendorPlate.  # noqa: E501
        :type sample_type: str
        :param samples: The samples of this VendorPlate.  # noqa: E501
        :type samples: List[VendorSample]
        :param status: The status of this VendorPlate.  # noqa: E501
        :type status: str
        :param status_time_stamp: The status_time_stamp of this VendorPlate.  # noqa: E501
        :type status_time_stamp: datetime
        :param vendor_barcode: The vendor_barcode of this VendorPlate.  # noqa: E501
        :type vendor_barcode: str
        :param vendor_barcode_image_url: The vendor_barcode_image_url of this VendorPlate.  # noqa: E501
        :type vendor_barcode_image_url: str
        :param vendor_plate_db_id: The vendor_plate_db_id of this VendorPlate.  # noqa: E501
        :type vendor_plate_db_id: str
        :param vendor_project_db_id: The vendor_project_db_id of this VendorPlate.  # noqa: E501
        :type vendor_project_db_id: str
        """
        self.swagger_types = {
            'client_plate_db_id': str,
            'files': List[VendorPlateFile],
            'plate_format': str,
            'sample_type': str,
            'samples': List[VendorSample],
            'status': str,
            'status_time_stamp': datetime,
            'vendor_barcode': str,
            'vendor_barcode_image_url': str,
            'vendor_plate_db_id': str,
            'vendor_project_db_id': str
        }

        self.attribute_map = {
            'client_plate_db_id': 'clientPlateDbId',
            'files': 'files',
            'plate_format': 'plateFormat',
            'sample_type': 'sampleType',
            'samples': 'samples',
            'status': 'status',
            'status_time_stamp': 'statusTimeStamp',
            'vendor_barcode': 'vendorBarcode',
            'vendor_barcode_image_url': 'vendorBarcodeImageURL',
            'vendor_plate_db_id': 'vendorPlateDbId',
            'vendor_project_db_id': 'vendorProjectDbId'
        }

        self._client_plate_db_id = client_plate_db_id
        self._files = files
        self._plate_format = plate_format
        self._sample_type = sample_type
        self._samples = samples
        self._status = status
        self._status_time_stamp = status_time_stamp
        self._vendor_barcode = vendor_barcode
        self._vendor_barcode_image_url = vendor_barcode_image_url
        self._vendor_plate_db_id = vendor_plate_db_id
        self._vendor_project_db_id = vendor_project_db_id

    @classmethod
    def from_dict(cls, dikt) -> 'VendorPlate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The vendorPlate of this VendorPlate.  # noqa: E501
        :rtype: VendorPlate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_plate_db_id(self) -> str:
        """Gets the client_plate_db_id of this VendorPlate.

        The ID which uniquely identifies this plate in the clients database  # noqa: E501

        :return: The client_plate_db_id of this VendorPlate.
        :rtype: str
        """
        return self._client_plate_db_id

    @client_plate_db_id.setter
    def client_plate_db_id(self, client_plate_db_id: str):
        """Sets the client_plate_db_id of this VendorPlate.

        The ID which uniquely identifies this plate in the clients database  # noqa: E501

        :param client_plate_db_id: The client_plate_db_id of this VendorPlate.
        :type client_plate_db_id: str
        """
        if client_plate_db_id is None:
            raise ValueError("Invalid value for `client_plate_db_id`, must not be `None`")  # noqa: E501

        self._client_plate_db_id = client_plate_db_id

    @property
    def files(self) -> List[VendorPlateFile]:
        """Gets the files of this VendorPlate.

        The array of data files produced by the vendors analysis  # noqa: E501

        :return: The files of this VendorPlate.
        :rtype: List[VendorPlateFile]
        """
        return self._files

    @files.setter
    def files(self, files: List[VendorPlateFile]):
        """Sets the files of this VendorPlate.

        The array of data files produced by the vendors analysis  # noqa: E501

        :param files: The files of this VendorPlate.
        :type files: List[VendorPlateFile]
        """

        self._files = files

    @property
    def plate_format(self) -> str:
        """Gets the plate_format of this VendorPlate.

        Defines the plate layout format, usually \"Plate_96\" for a 96 well plate or \"Tubes\" for plateless format  # noqa: E501

        :return: The plate_format of this VendorPlate.
        :rtype: str
        """
        return self._plate_format

    @plate_format.setter
    def plate_format(self, plate_format: str):
        """Sets the plate_format of this VendorPlate.

        Defines the plate layout format, usually \"Plate_96\" for a 96 well plate or \"Tubes\" for plateless format  # noqa: E501

        :param plate_format: The plate_format of this VendorPlate.
        :type plate_format: str
        """

        self._plate_format = plate_format

    @property
    def sample_type(self) -> str:
        """Gets the sample_type of this VendorPlate.

        The type of sample. ie \"DNA\", \"RNA\", \"Tissue\", etc   # noqa: E501

        :return: The sample_type of this VendorPlate.
        :rtype: str
        """
        return self._sample_type

    @sample_type.setter
    def sample_type(self, sample_type: str):
        """Sets the sample_type of this VendorPlate.

        The type of sample. ie \"DNA\", \"RNA\", \"Tissue\", etc   # noqa: E501

        :param sample_type: The sample_type of this VendorPlate.
        :type sample_type: str
        """

        self._sample_type = sample_type

    @property
    def samples(self) -> List[VendorSample]:
        """Gets the samples of this VendorPlate.

        List of samples in the plate  # noqa: E501

        :return: The samples of this VendorPlate.
        :rtype: List[VendorSample]
        """
        return self._samples

    @samples.setter
    def samples(self, samples: List[VendorSample]):
        """Sets the samples of this VendorPlate.

        List of samples in the plate  # noqa: E501

        :param samples: The samples of this VendorPlate.
        :type samples: List[VendorSample]
        """
        if samples is None:
            raise ValueError("Invalid value for `samples`, must not be `None`")  # noqa: E501

        self._samples = samples

    @property
    def status(self) -> str:
        """Gets the status of this VendorPlate.

        The status of the plate in the processing pipeline. Typically, \"Received\", \"Processing\", \"QC_passed\", QC_failed\", \"Completed\" (as per vendor specifications)  # noqa: E501

        :return: The status of this VendorPlate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this VendorPlate.

        The status of the plate in the processing pipeline. Typically, \"Received\", \"Processing\", \"QC_passed\", QC_failed\", \"Completed\" (as per vendor specifications)  # noqa: E501

        :param status: The status of this VendorPlate.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_time_stamp(self) -> datetime:
        """Gets the status_time_stamp of this VendorPlate.

        The time stamp of the most recent status update  # noqa: E501

        :return: The status_time_stamp of this VendorPlate.
        :rtype: datetime
        """
        return self._status_time_stamp

    @status_time_stamp.setter
    def status_time_stamp(self, status_time_stamp: datetime):
        """Sets the status_time_stamp of this VendorPlate.

        The time stamp of the most recent status update  # noqa: E501

        :param status_time_stamp: The status_time_stamp of this VendorPlate.
        :type status_time_stamp: datetime
        """
        if status_time_stamp is None:
            raise ValueError("Invalid value for `status_time_stamp`, must not be `None`")  # noqa: E501

        self._status_time_stamp = status_time_stamp

    @property
    def vendor_barcode(self) -> str:
        """Gets the vendor_barcode of this VendorPlate.

        A string that can be represented as a barcode, identifying this plate   # noqa: E501

        :return: The vendor_barcode of this VendorPlate.
        :rtype: str
        """
        return self._vendor_barcode

    @vendor_barcode.setter
    def vendor_barcode(self, vendor_barcode: str):
        """Sets the vendor_barcode of this VendorPlate.

        A string that can be represented as a barcode, identifying this plate   # noqa: E501

        :param vendor_barcode: The vendor_barcode of this VendorPlate.
        :type vendor_barcode: str
        """

        self._vendor_barcode = vendor_barcode

    @property
    def vendor_barcode_image_url(self) -> str:
        """Gets the vendor_barcode_image_url of this VendorPlate.

        A URL pointing to an image file which has the bar code which identifies this plate  # noqa: E501

        :return: The vendor_barcode_image_url of this VendorPlate.
        :rtype: str
        """
        return self._vendor_barcode_image_url

    @vendor_barcode_image_url.setter
    def vendor_barcode_image_url(self, vendor_barcode_image_url: str):
        """Sets the vendor_barcode_image_url of this VendorPlate.

        A URL pointing to an image file which has the bar code which identifies this plate  # noqa: E501

        :param vendor_barcode_image_url: The vendor_barcode_image_url of this VendorPlate.
        :type vendor_barcode_image_url: str
        """

        self._vendor_barcode_image_url = vendor_barcode_image_url

    @property
    def vendor_plate_db_id(self) -> str:
        """Gets the vendor_plate_db_id of this VendorPlate.

        The ID which uniquely identifies this plate in the vendors database  # noqa: E501

        :return: The vendor_plate_db_id of this VendorPlate.
        :rtype: str
        """
        return self._vendor_plate_db_id

    @vendor_plate_db_id.setter
    def vendor_plate_db_id(self, vendor_plate_db_id: str):
        """Sets the vendor_plate_db_id of this VendorPlate.

        The ID which uniquely identifies this plate in the vendors database  # noqa: E501

        :param vendor_plate_db_id: The vendor_plate_db_id of this VendorPlate.
        :type vendor_plate_db_id: str
        """
        if vendor_plate_db_id is None:
            raise ValueError("Invalid value for `vendor_plate_db_id`, must not be `None`")  # noqa: E501

        self._vendor_plate_db_id = vendor_plate_db_id

    @property
    def vendor_project_db_id(self) -> str:
        """Gets the vendor_project_db_id of this VendorPlate.

        The ID which uniquely identifies this project in the vendors database  # noqa: E501

        :return: The vendor_project_db_id of this VendorPlate.
        :rtype: str
        """
        return self._vendor_project_db_id

    @vendor_project_db_id.setter
    def vendor_project_db_id(self, vendor_project_db_id: str):
        """Sets the vendor_project_db_id of this VendorPlate.

        The ID which uniquely identifies this project in the vendors database  # noqa: E501

        :param vendor_project_db_id: The vendor_project_db_id of this VendorPlate.
        :type vendor_project_db_id: str
        """
        if vendor_project_db_id is None:
            raise ValueError("Invalid value for `vendor_project_db_id`, must not be `None`")  # noqa: E501

        self._vendor_project_db_id = vendor_project_db_id
