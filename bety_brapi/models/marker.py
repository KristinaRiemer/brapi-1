# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class Marker(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, analysis_methods: List[str]=None, default_display_name: str=None, marker_db_id: str=None, ref_alt: List[str]=None, synonyms: List[str]=None, type: str=None):  # noqa: E501
        """Marker - a model defined in Swagger

        :param analysis_methods: The analysis_methods of this Marker.  # noqa: E501
        :type analysis_methods: List[str]
        :param default_display_name: The default_display_name of this Marker.  # noqa: E501
        :type default_display_name: str
        :param marker_db_id: The marker_db_id of this Marker.  # noqa: E501
        :type marker_db_id: str
        :param ref_alt: The ref_alt of this Marker.  # noqa: E501
        :type ref_alt: List[str]
        :param synonyms: The synonyms of this Marker.  # noqa: E501
        :type synonyms: List[str]
        :param type: The type of this Marker.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'analysis_methods': List[str],
            'default_display_name': str,
            'marker_db_id': str,
            'ref_alt': List[str],
            'synonyms': List[str],
            'type': str
        }

        self.attribute_map = {
            'analysis_methods': 'analysisMethods',
            'default_display_name': 'defaultDisplayName',
            'marker_db_id': 'markerDbId',
            'ref_alt': 'refAlt',
            'synonyms': 'synonyms',
            'type': 'type'
        }

        self._analysis_methods = analysis_methods
        self._default_display_name = default_display_name
        self._marker_db_id = marker_db_id
        self._ref_alt = ref_alt
        self._synonyms = synonyms
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Marker':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The marker of this Marker.  # noqa: E501
        :rtype: Marker
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_methods(self) -> List[str]:
        """Gets the analysis_methods of this Marker.

        List of the genotyping platforms used to interrogate the marker  # noqa: E501

        :return: The analysis_methods of this Marker.
        :rtype: List[str]
        """
        return self._analysis_methods

    @analysis_methods.setter
    def analysis_methods(self, analysis_methods: List[str]):
        """Sets the analysis_methods of this Marker.

        List of the genotyping platforms used to interrogate the marker  # noqa: E501

        :param analysis_methods: The analysis_methods of this Marker.
        :type analysis_methods: List[str]
        """

        self._analysis_methods = analysis_methods

    @property
    def default_display_name(self) -> str:
        """Gets the default_display_name of this Marker.

        A string representing the marker that will be meaningful to the user  # noqa: E501

        :return: The default_display_name of this Marker.
        :rtype: str
        """
        return self._default_display_name

    @default_display_name.setter
    def default_display_name(self, default_display_name: str):
        """Sets the default_display_name of this Marker.

        A string representing the marker that will be meaningful to the user  # noqa: E501

        :param default_display_name: The default_display_name of this Marker.
        :type default_display_name: str
        """

        self._default_display_name = default_display_name

    @property
    def marker_db_id(self) -> str:
        """Gets the marker_db_id of this Marker.

        Internal db identifier  # noqa: E501

        :return: The marker_db_id of this Marker.
        :rtype: str
        """
        return self._marker_db_id

    @marker_db_id.setter
    def marker_db_id(self, marker_db_id: str):
        """Sets the marker_db_id of this Marker.

        Internal db identifier  # noqa: E501

        :param marker_db_id: The marker_db_id of this Marker.
        :type marker_db_id: str
        """

        self._marker_db_id = marker_db_id

    @property
    def ref_alt(self) -> List[str]:
        """Gets the ref_alt of this Marker.

        List of the reference (as the first item) and alternatives (the remaining items)  # noqa: E501

        :return: The ref_alt of this Marker.
        :rtype: List[str]
        """
        return self._ref_alt

    @ref_alt.setter
    def ref_alt(self, ref_alt: List[str]):
        """Sets the ref_alt of this Marker.

        List of the reference (as the first item) and alternatives (the remaining items)  # noqa: E501

        :param ref_alt: The ref_alt of this Marker.
        :type ref_alt: List[str]
        """

        self._ref_alt = ref_alt

    @property
    def synonyms(self) -> List[str]:
        """Gets the synonyms of this Marker.

        List of other names for this marker  # noqa: E501

        :return: The synonyms of this Marker.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms: List[str]):
        """Sets the synonyms of this Marker.

        List of other names for this marker  # noqa: E501

        :param synonyms: The synonyms of this Marker.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def type(self) -> str:
        """Gets the type of this Marker.

        The type of marker, e.g. SNP  # noqa: E501

        :return: The type of this Marker.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Marker.

        The type of marker, e.g. SNP  # noqa: E501

        :param type: The type of this Marker.
        :type type: str
        """

        self._type = type
