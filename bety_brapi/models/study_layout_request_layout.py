# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class StudyLayoutRequestLayout(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, x: str=None, y: str=None, block_number: int=None, entry_type: str=None, observation_unit_db_id: str=None, position_coordinate_x: str=None, position_coordinate_x_type: str=None, position_coordinate_y: str=None, position_coordinate_y_type: str=None, replicate: int=None):  # noqa: E501
        """StudyLayoutRequestLayout - a model defined in Swagger

        :param x: The x of this StudyLayoutRequestLayout.  # noqa: E501
        :type x: str
        :param y: The y of this StudyLayoutRequestLayout.  # noqa: E501
        :type y: str
        :param block_number: The block_number of this StudyLayoutRequestLayout.  # noqa: E501
        :type block_number: int
        :param entry_type: The entry_type of this StudyLayoutRequestLayout.  # noqa: E501
        :type entry_type: str
        :param observation_unit_db_id: The observation_unit_db_id of this StudyLayoutRequestLayout.  # noqa: E501
        :type observation_unit_db_id: str
        :param position_coordinate_x: The position_coordinate_x of this StudyLayoutRequestLayout.  # noqa: E501
        :type position_coordinate_x: str
        :param position_coordinate_x_type: The position_coordinate_x_type of this StudyLayoutRequestLayout.  # noqa: E501
        :type position_coordinate_x_type: str
        :param position_coordinate_y: The position_coordinate_y of this StudyLayoutRequestLayout.  # noqa: E501
        :type position_coordinate_y: str
        :param position_coordinate_y_type: The position_coordinate_y_type of this StudyLayoutRequestLayout.  # noqa: E501
        :type position_coordinate_y_type: str
        :param replicate: The replicate of this StudyLayoutRequestLayout.  # noqa: E501
        :type replicate: int
        """
        self.swagger_types = {
            'x': str,
            'y': str,
            'block_number': int,
            'entry_type': str,
            'observation_unit_db_id': str,
            'position_coordinate_x': str,
            'position_coordinate_x_type': str,
            'position_coordinate_y': str,
            'position_coordinate_y_type': str,
            'replicate': int
        }

        self.attribute_map = {
            'x': 'X',
            'y': 'Y',
            'block_number': 'blockNumber',
            'entry_type': 'entryType',
            'observation_unit_db_id': 'observationUnitDbId',
            'position_coordinate_x': 'positionCoordinateX',
            'position_coordinate_x_type': 'positionCoordinateXType',
            'position_coordinate_y': 'positionCoordinateY',
            'position_coordinate_y_type': 'positionCoordinateYType',
            'replicate': 'replicate'
        }

        self._x = x
        self._y = y
        self._block_number = block_number
        self._entry_type = entry_type
        self._observation_unit_db_id = observation_unit_db_id
        self._position_coordinate_x = position_coordinate_x
        self._position_coordinate_x_type = position_coordinate_x_type
        self._position_coordinate_y = position_coordinate_y
        self._position_coordinate_y_type = position_coordinate_y_type
        self._replicate = replicate

    @classmethod
    def from_dict(cls, dikt) -> 'StudyLayoutRequestLayout':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The studyLayoutRequest_layout of this StudyLayoutRequestLayout.  # noqa: E501
        :rtype: StudyLayoutRequestLayout
        """
        return util.deserialize_model(dikt, cls)

    @property
    def x(self) -> str:
        """Gets the x of this StudyLayoutRequestLayout.

        DEPRECATED - use \"positionCoordinateX\"  # noqa: E501

        :return: The x of this StudyLayoutRequestLayout.
        :rtype: str
        """
        return self._x

    @x.setter
    def x(self, x: str):
        """Sets the x of this StudyLayoutRequestLayout.

        DEPRECATED - use \"positionCoordinateX\"  # noqa: E501

        :param x: The x of this StudyLayoutRequestLayout.
        :type x: str
        """

        self._x = x

    @property
    def y(self) -> str:
        """Gets the y of this StudyLayoutRequestLayout.

        DEPRECATED - use \"positionCoordinateY\"  # noqa: E501

        :return: The y of this StudyLayoutRequestLayout.
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y: str):
        """Sets the y of this StudyLayoutRequestLayout.

        DEPRECATED - use \"positionCoordinateY\"  # noqa: E501

        :param y: The y of this StudyLayoutRequestLayout.
        :type y: str
        """

        self._y = y

    @property
    def block_number(self) -> int:
        """Gets the block_number of this StudyLayoutRequestLayout.


        :return: The block_number of this StudyLayoutRequestLayout.
        :rtype: int
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number: int):
        """Sets the block_number of this StudyLayoutRequestLayout.


        :param block_number: The block_number of this StudyLayoutRequestLayout.
        :type block_number: int
        """

        self._block_number = block_number

    @property
    def entry_type(self) -> str:
        """Gets the entry_type of this StudyLayoutRequestLayout.


        :return: The entry_type of this StudyLayoutRequestLayout.
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type: str):
        """Sets the entry_type of this StudyLayoutRequestLayout.


        :param entry_type: The entry_type of this StudyLayoutRequestLayout.
        :type entry_type: str
        """
        allowed_values = ["CHECK", "TEST", "FILLER"]  # noqa: E501
        if entry_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_type` ({0}), must be one of {1}"
                .format(entry_type, allowed_values)
            )

        self._entry_type = entry_type

    @property
    def observation_unit_db_id(self) -> str:
        """Gets the observation_unit_db_id of this StudyLayoutRequestLayout.


        :return: The observation_unit_db_id of this StudyLayoutRequestLayout.
        :rtype: str
        """
        return self._observation_unit_db_id

    @observation_unit_db_id.setter
    def observation_unit_db_id(self, observation_unit_db_id: str):
        """Sets the observation_unit_db_id of this StudyLayoutRequestLayout.


        :param observation_unit_db_id: The observation_unit_db_id of this StudyLayoutRequestLayout.
        :type observation_unit_db_id: str
        """

        self._observation_unit_db_id = observation_unit_db_id

    @property
    def position_coordinate_x(self) -> str:
        """Gets the position_coordinate_x of this StudyLayoutRequestLayout.

        The X position coordinate for an observation unit. Different systems may use different coordinate systems.  # noqa: E501

        :return: The position_coordinate_x of this StudyLayoutRequestLayout.
        :rtype: str
        """
        return self._position_coordinate_x

    @position_coordinate_x.setter
    def position_coordinate_x(self, position_coordinate_x: str):
        """Sets the position_coordinate_x of this StudyLayoutRequestLayout.

        The X position coordinate for an observation unit. Different systems may use different coordinate systems.  # noqa: E501

        :param position_coordinate_x: The position_coordinate_x of this StudyLayoutRequestLayout.
        :type position_coordinate_x: str
        """

        self._position_coordinate_x = position_coordinate_x

    @property
    def position_coordinate_x_type(self) -> str:
        """Gets the position_coordinate_x_type of this StudyLayoutRequestLayout.

        The type of positional coordinate used. Must be one of the following values LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details PLANTED_ROW - The physical planted row number  PLANTED_INDIVIDUAl - The physical counted number, could be independant or within a planted row GRID_ROW - The row index number of a square grid overlay GRID_COL - The column index number of a square grid overlay MEASURED_ROW - The distance in meters from a defined 0th row MEASURED_COL - The distance in meters from a defined 0th column   # noqa: E501

        :return: The position_coordinate_x_type of this StudyLayoutRequestLayout.
        :rtype: str
        """
        return self._position_coordinate_x_type

    @position_coordinate_x_type.setter
    def position_coordinate_x_type(self, position_coordinate_x_type: str):
        """Sets the position_coordinate_x_type of this StudyLayoutRequestLayout.

        The type of positional coordinate used. Must be one of the following values LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details PLANTED_ROW - The physical planted row number  PLANTED_INDIVIDUAl - The physical counted number, could be independant or within a planted row GRID_ROW - The row index number of a square grid overlay GRID_COL - The column index number of a square grid overlay MEASURED_ROW - The distance in meters from a defined 0th row MEASURED_COL - The distance in meters from a defined 0th column   # noqa: E501

        :param position_coordinate_x_type: The position_coordinate_x_type of this StudyLayoutRequestLayout.
        :type position_coordinate_x_type: str
        """
        allowed_values = ["LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAl", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL"]  # noqa: E501
        if position_coordinate_x_type not in allowed_values:
            raise ValueError(
                "Invalid value for `position_coordinate_x_type` ({0}), must be one of {1}"
                .format(position_coordinate_x_type, allowed_values)
            )

        self._position_coordinate_x_type = position_coordinate_x_type

    @property
    def position_coordinate_y(self) -> str:
        """Gets the position_coordinate_y of this StudyLayoutRequestLayout.

        The Y position coordinate for an observation unit. Different systems may use different coordinate systems.  # noqa: E501

        :return: The position_coordinate_y of this StudyLayoutRequestLayout.
        :rtype: str
        """
        return self._position_coordinate_y

    @position_coordinate_y.setter
    def position_coordinate_y(self, position_coordinate_y: str):
        """Sets the position_coordinate_y of this StudyLayoutRequestLayout.

        The Y position coordinate for an observation unit. Different systems may use different coordinate systems.  # noqa: E501

        :param position_coordinate_y: The position_coordinate_y of this StudyLayoutRequestLayout.
        :type position_coordinate_y: str
        """

        self._position_coordinate_y = position_coordinate_y

    @property
    def position_coordinate_y_type(self) -> str:
        """Gets the position_coordinate_y_type of this StudyLayoutRequestLayout.

        The type of positional coordinate used. Must be one of the following values LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details PLANTED_ROW - The physical planted row number  PLANTED_INDIVIDUAl - The physical counted number, could be independant or within a planted row GRID_ROW - The row index number of a square grid overlay GRID_COL - The column index number of a square grid overlay MEASURED_ROW - The distance in meters from a defined 0th row MEASURED_COL - The distance in meters from a defined 0th column   # noqa: E501

        :return: The position_coordinate_y_type of this StudyLayoutRequestLayout.
        :rtype: str
        """
        return self._position_coordinate_y_type

    @position_coordinate_y_type.setter
    def position_coordinate_y_type(self, position_coordinate_y_type: str):
        """Sets the position_coordinate_y_type of this StudyLayoutRequestLayout.

        The type of positional coordinate used. Must be one of the following values LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details PLANTED_ROW - The physical planted row number  PLANTED_INDIVIDUAl - The physical counted number, could be independant or within a planted row GRID_ROW - The row index number of a square grid overlay GRID_COL - The column index number of a square grid overlay MEASURED_ROW - The distance in meters from a defined 0th row MEASURED_COL - The distance in meters from a defined 0th column   # noqa: E501

        :param position_coordinate_y_type: The position_coordinate_y_type of this StudyLayoutRequestLayout.
        :type position_coordinate_y_type: str
        """
        allowed_values = ["LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAl", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL"]  # noqa: E501
        if position_coordinate_y_type not in allowed_values:
            raise ValueError(
                "Invalid value for `position_coordinate_y_type` ({0}), must be one of {1}"
                .format(position_coordinate_y_type, allowed_values)
            )

        self._position_coordinate_y_type = position_coordinate_y_type

    @property
    def replicate(self) -> int:
        """Gets the replicate of this StudyLayoutRequestLayout.


        :return: The replicate of this StudyLayoutRequestLayout.
        :rtype: int
        """
        return self._replicate

    @replicate.setter
    def replicate(self, replicate: int):
        """Sets the replicate of this StudyLayoutRequestLayout.


        :param replicate: The replicate of this StudyLayoutRequestLayout.
        :type replicate: int
        """

        self._replicate = replicate
