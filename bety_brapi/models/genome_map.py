# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class GenomeMap(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, linkage_group_count: int=None, map_db_id: str=None, map_name: str=None, marker_count: int=None, name: str=None, published_date: date=None, species: str=None, type: str=None, unit: str=None):  # noqa: E501
        """GenomeMap - a model defined in Swagger

        :param comments: The comments of this GenomeMap.  # noqa: E501
        :type comments: str
        :param linkage_group_count: The linkage_group_count of this GenomeMap.  # noqa: E501
        :type linkage_group_count: int
        :param map_db_id: The map_db_id of this GenomeMap.  # noqa: E501
        :type map_db_id: str
        :param map_name: The map_name of this GenomeMap.  # noqa: E501
        :type map_name: str
        :param marker_count: The marker_count of this GenomeMap.  # noqa: E501
        :type marker_count: int
        :param name: The name of this GenomeMap.  # noqa: E501
        :type name: str
        :param published_date: The published_date of this GenomeMap.  # noqa: E501
        :type published_date: date
        :param species: The species of this GenomeMap.  # noqa: E501
        :type species: str
        :param type: The type of this GenomeMap.  # noqa: E501
        :type type: str
        :param unit: The unit of this GenomeMap.  # noqa: E501
        :type unit: str
        """
        self.swagger_types = {
            'comments': str,
            'linkage_group_count': int,
            'map_db_id': str,
            'map_name': str,
            'marker_count': int,
            'name': str,
            'published_date': date,
            'species': str,
            'type': str,
            'unit': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'linkage_group_count': 'linkageGroupCount',
            'map_db_id': 'mapDbId',
            'map_name': 'mapName',
            'marker_count': 'markerCount',
            'name': 'name',
            'published_date': 'publishedDate',
            'species': 'species',
            'type': 'type',
            'unit': 'unit'
        }

        self._comments = comments
        self._linkage_group_count = linkage_group_count
        self._map_db_id = map_db_id
        self._map_name = map_name
        self._marker_count = marker_count
        self._name = name
        self._published_date = published_date
        self._species = species
        self._type = type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'GenomeMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The genomeMap of this GenomeMap.  # noqa: E501
        :rtype: GenomeMap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self) -> str:
        """Gets the comments of this GenomeMap.

        Additional comments  # noqa: E501

        :return: The comments of this GenomeMap.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments: str):
        """Sets the comments of this GenomeMap.

        Additional comments  # noqa: E501

        :param comments: The comments of this GenomeMap.
        :type comments: str
        """

        self._comments = comments

    @property
    def linkage_group_count(self) -> int:
        """Gets the linkage_group_count of this GenomeMap.

        The number of linkage groups present in this genome map  # noqa: E501

        :return: The linkage_group_count of this GenomeMap.
        :rtype: int
        """
        return self._linkage_group_count

    @linkage_group_count.setter
    def linkage_group_count(self, linkage_group_count: int):
        """Sets the linkage_group_count of this GenomeMap.

        The number of linkage groups present in this genome map  # noqa: E501

        :param linkage_group_count: The linkage_group_count of this GenomeMap.
        :type linkage_group_count: int
        """

        self._linkage_group_count = linkage_group_count

    @property
    def map_db_id(self) -> str:
        """Gets the map_db_id of this GenomeMap.

        The ID which uniquely identifies this genome map  # noqa: E501

        :return: The map_db_id of this GenomeMap.
        :rtype: str
        """
        return self._map_db_id

    @map_db_id.setter
    def map_db_id(self, map_db_id: str):
        """Sets the map_db_id of this GenomeMap.

        The ID which uniquely identifies this genome map  # noqa: E501

        :param map_db_id: The map_db_id of this GenomeMap.
        :type map_db_id: str
        """

        self._map_db_id = map_db_id

    @property
    def map_name(self) -> str:
        """Gets the map_name of this GenomeMap.

        A human readable name for this genome map  # noqa: E501

        :return: The map_name of this GenomeMap.
        :rtype: str
        """
        return self._map_name

    @map_name.setter
    def map_name(self, map_name: str):
        """Sets the map_name of this GenomeMap.

        A human readable name for this genome map  # noqa: E501

        :param map_name: The map_name of this GenomeMap.
        :type map_name: str
        """

        self._map_name = map_name

    @property
    def marker_count(self) -> int:
        """Gets the marker_count of this GenomeMap.

        The number of markers present in this genome map  # noqa: E501

        :return: The marker_count of this GenomeMap.
        :rtype: int
        """
        return self._marker_count

    @marker_count.setter
    def marker_count(self, marker_count: int):
        """Sets the marker_count of this GenomeMap.

        The number of markers present in this genome map  # noqa: E501

        :param marker_count: The marker_count of this GenomeMap.
        :type marker_count: int
        """

        self._marker_count = marker_count

    @property
    def name(self) -> str:
        """Gets the name of this GenomeMap.

        DEPRECATED in v1.3 - Use \"mapName\"  # noqa: E501

        :return: The name of this GenomeMap.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GenomeMap.

        DEPRECATED in v1.3 - Use \"mapName\"  # noqa: E501

        :param name: The name of this GenomeMap.
        :type name: str
        """

        self._name = name

    @property
    def published_date(self) -> date:
        """Gets the published_date of this GenomeMap.

        The date this genome was published  # noqa: E501

        :return: The published_date of this GenomeMap.
        :rtype: date
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date: date):
        """Sets the published_date of this GenomeMap.

        The date this genome was published  # noqa: E501

        :param published_date: The published_date of this GenomeMap.
        :type published_date: date
        """

        self._published_date = published_date

    @property
    def species(self) -> str:
        """Gets the species of this GenomeMap.

        The name of the species   # noqa: E501

        :return: The species of this GenomeMap.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species: str):
        """Sets the species of this GenomeMap.

        The name of the species   # noqa: E501

        :param species: The species of this GenomeMap.
        :type species: str
        """

        self._species = species

    @property
    def type(self) -> str:
        """Gets the type of this GenomeMap.

        The type of map this represents, ussually \"Genetic\"  # noqa: E501

        :return: The type of this GenomeMap.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this GenomeMap.

        The type of map this represents, ussually \"Genetic\"  # noqa: E501

        :param type: The type of this GenomeMap.
        :type type: str
        """

        self._type = type

    @property
    def unit(self) -> str:
        """Gets the unit of this GenomeMap.

        The units used to describe the data in this map  # noqa: E501

        :return: The unit of this GenomeMap.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this GenomeMap.

        The units used to describe the data in this map  # noqa: E501

        :param unit: The unit of this GenomeMap.
        :type unit: str
        """

        self._unit = unit
