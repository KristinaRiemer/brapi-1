# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class Method(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, description: str=None, formula: str=None, method_db_id: str=None, method_name: str=None, name: str=None, reference: str=None):  # noqa: E501
        """Method - a model defined in Swagger

        :param _class: The _class of this Method.  # noqa: E501
        :type _class: str
        :param description: The description of this Method.  # noqa: E501
        :type description: str
        :param formula: The formula of this Method.  # noqa: E501
        :type formula: str
        :param method_db_id: The method_db_id of this Method.  # noqa: E501
        :type method_db_id: str
        :param method_name: The method_name of this Method.  # noqa: E501
        :type method_name: str
        :param name: The name of this Method.  # noqa: E501
        :type name: str
        :param reference: The reference of this Method.  # noqa: E501
        :type reference: str
        """
        self.swagger_types = {
            '_class': str,
            'description': str,
            'formula': str,
            'method_db_id': str,
            'method_name': str,
            'name': str,
            'reference': str
        }

        self.attribute_map = {
            '_class': 'class',
            'description': 'description',
            'formula': 'formula',
            'method_db_id': 'methodDbId',
            'method_name': 'methodName',
            'name': 'name',
            'reference': 'reference'
        }

        self.__class = _class
        self._description = description
        self._formula = formula
        self._method_db_id = method_db_id
        self._method_name = method_name
        self._name = name
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt) -> 'Method':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The method of this Method.  # noqa: E501
        :rtype: Method
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self) -> str:
        """Gets the _class of this Method.

        Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.  # noqa: E501

        :return: The _class of this Method.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this Method.

        Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.  # noqa: E501

        :param _class: The _class of this Method.
        :type _class: str
        """

        self.__class = _class

    @property
    def description(self) -> str:
        """Gets the description of this Method.

        Method description.  # noqa: E501

        :return: The description of this Method.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Method.

        Method description.  # noqa: E501

        :param description: The description of this Method.
        :type description: str
        """

        self._description = description

    @property
    def formula(self) -> str:
        """Gets the formula of this Method.

        For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation  # noqa: E501

        :return: The formula of this Method.
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula: str):
        """Sets the formula of this Method.

        For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation  # noqa: E501

        :param formula: The formula of this Method.
        :type formula: str
        """

        self._formula = formula

    @property
    def method_db_id(self) -> str:
        """Gets the method_db_id of this Method.

        Method unique identifier  # noqa: E501

        :return: The method_db_id of this Method.
        :rtype: str
        """
        return self._method_db_id

    @method_db_id.setter
    def method_db_id(self, method_db_id: str):
        """Sets the method_db_id of this Method.

        Method unique identifier  # noqa: E501

        :param method_db_id: The method_db_id of this Method.
        :type method_db_id: str
        """

        self._method_db_id = method_db_id

    @property
    def method_name(self) -> str:
        """Gets the method_name of this Method.

        Human readable name for the method  # noqa: E501

        :return: The method_name of this Method.
        :rtype: str
        """
        return self._method_name

    @method_name.setter
    def method_name(self, method_name: str):
        """Sets the method_name of this Method.

        Human readable name for the method  # noqa: E501

        :param method_name: The method_name of this Method.
        :type method_name: str
        """

        self._method_name = method_name

    @property
    def name(self) -> str:
        """Gets the name of this Method.

        DEPRECATED in v1.3 - Use \"methodName\"  # noqa: E501

        :return: The name of this Method.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Method.

        DEPRECATED in v1.3 - Use \"methodName\"  # noqa: E501

        :param name: The name of this Method.
        :type name: str
        """

        self._name = name

    @property
    def reference(self) -> str:
        """Gets the reference of this Method.

        Bibliographical reference describing the method.  # noqa: E501

        :return: The reference of this Method.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference: str):
        """Sets the reference of this Method.

        Bibliographical reference describing the method.  # noqa: E501

        :param reference: The reference of this Method.
        :type reference: str
        """

        self._reference = reference
