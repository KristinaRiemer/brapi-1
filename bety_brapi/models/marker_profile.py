# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class MarkerProfile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, analysis_method: str=None, data: List[Dict[str, str]]=None, extract_db_id: str=None, germplasm_db_id: str=None, markerprofile_db_id: str=None, unique_display_name: str=None):  # noqa: E501
        """MarkerProfile - a model defined in Swagger

        :param analysis_method: The analysis_method of this MarkerProfile.  # noqa: E501
        :type analysis_method: str
        :param data: The data of this MarkerProfile.  # noqa: E501
        :type data: List[Dict[str, str]]
        :param extract_db_id: The extract_db_id of this MarkerProfile.  # noqa: E501
        :type extract_db_id: str
        :param germplasm_db_id: The germplasm_db_id of this MarkerProfile.  # noqa: E501
        :type germplasm_db_id: str
        :param markerprofile_db_id: The markerprofile_db_id of this MarkerProfile.  # noqa: E501
        :type markerprofile_db_id: str
        :param unique_display_name: The unique_display_name of this MarkerProfile.  # noqa: E501
        :type unique_display_name: str
        """
        self.swagger_types = {
            'analysis_method': str,
            'data': List[Dict[str, str]],
            'extract_db_id': str,
            'germplasm_db_id': str,
            'markerprofile_db_id': str,
            'unique_display_name': str
        }

        self.attribute_map = {
            'analysis_method': 'analysisMethod',
            'data': 'data',
            'extract_db_id': 'extractDbId',
            'germplasm_db_id': 'germplasmDbId',
            'markerprofile_db_id': 'markerprofileDbId',
            'unique_display_name': 'uniqueDisplayName'
        }

        self._analysis_method = analysis_method
        self._data = data
        self._extract_db_id = extract_db_id
        self._germplasm_db_id = germplasm_db_id
        self._markerprofile_db_id = markerprofile_db_id
        self._unique_display_name = unique_display_name

    @classmethod
    def from_dict(cls, dikt) -> 'MarkerProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The markerProfile of this MarkerProfile.  # noqa: E501
        :rtype: MarkerProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_method(self) -> str:
        """Gets the analysis_method of this MarkerProfile.

        The type of analysis performed to determine a set of marker data  # noqa: E501

        :return: The analysis_method of this MarkerProfile.
        :rtype: str
        """
        return self._analysis_method

    @analysis_method.setter
    def analysis_method(self, analysis_method: str):
        """Sets the analysis_method of this MarkerProfile.

        The type of analysis performed to determine a set of marker data  # noqa: E501

        :param analysis_method: The analysis_method of this MarkerProfile.
        :type analysis_method: str
        """

        self._analysis_method = analysis_method

    @property
    def data(self) -> List[Dict[str, str]]:
        """Gets the data of this MarkerProfile.

        <strong>Required</strong> array of marker-name/score pairs  # noqa: E501

        :return: The data of this MarkerProfile.
        :rtype: List[Dict[str, str]]
        """
        return self._data

    @data.setter
    def data(self, data: List[Dict[str, str]]):
        """Sets the data of this MarkerProfile.

        <strong>Required</strong> array of marker-name/score pairs  # noqa: E501

        :param data: The data of this MarkerProfile.
        :type data: List[Dict[str, str]]
        """

        self._data = data

    @property
    def extract_db_id(self) -> str:
        """Gets the extract_db_id of this MarkerProfile.

        <strong>Required</strong>  # noqa: E501

        :return: The extract_db_id of this MarkerProfile.
        :rtype: str
        """
        return self._extract_db_id

    @extract_db_id.setter
    def extract_db_id(self, extract_db_id: str):
        """Sets the extract_db_id of this MarkerProfile.

        <strong>Required</strong>  # noqa: E501

        :param extract_db_id: The extract_db_id of this MarkerProfile.
        :type extract_db_id: str
        """

        self._extract_db_id = extract_db_id

    @property
    def germplasm_db_id(self) -> str:
        """Gets the germplasm_db_id of this MarkerProfile.

        <strong>Required</strong>  # noqa: E501

        :return: The germplasm_db_id of this MarkerProfile.
        :rtype: str
        """
        return self._germplasm_db_id

    @germplasm_db_id.setter
    def germplasm_db_id(self, germplasm_db_id: str):
        """Sets the germplasm_db_id of this MarkerProfile.

        <strong>Required</strong>  # noqa: E501

        :param germplasm_db_id: The germplasm_db_id of this MarkerProfile.
        :type germplasm_db_id: str
        """

        self._germplasm_db_id = germplasm_db_id

    @property
    def markerprofile_db_id(self) -> str:
        """Gets the markerprofile_db_id of this MarkerProfile.

        Unique in the database. Can be a catenation of unique IDs for germplasm and extract. <strong>Required</strong>  # noqa: E501

        :return: The markerprofile_db_id of this MarkerProfile.
        :rtype: str
        """
        return self._markerprofile_db_id

    @markerprofile_db_id.setter
    def markerprofile_db_id(self, markerprofile_db_id: str):
        """Sets the markerprofile_db_id of this MarkerProfile.

        Unique in the database. Can be a catenation of unique IDs for germplasm and extract. <strong>Required</strong>  # noqa: E501

        :param markerprofile_db_id: The markerprofile_db_id of this MarkerProfile.
        :type markerprofile_db_id: str
        """

        self._markerprofile_db_id = markerprofile_db_id

    @property
    def unique_display_name(self) -> str:
        """Gets the unique_display_name of this MarkerProfile.

        Human readable display name for this marker profile  # noqa: E501

        :return: The unique_display_name of this MarkerProfile.
        :rtype: str
        """
        return self._unique_display_name

    @unique_display_name.setter
    def unique_display_name(self, unique_display_name: str):
        """Sets the unique_display_name of this MarkerProfile.

        Human readable display name for this marker profile  # noqa: E501

        :param unique_display_name: The unique_display_name of this MarkerProfile.
        :type unique_display_name: str
        """

        self._unique_display_name = unique_display_name
