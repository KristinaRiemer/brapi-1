# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class ProgenyProgeny(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, default_display_name: str=None, germplasm_db_id: str=None, parent_type: str=None):  # noqa: E501
        """ProgenyProgeny - a model defined in Swagger

        :param default_display_name: The default_display_name of this ProgenyProgeny.  # noqa: E501
        :type default_display_name: str
        :param germplasm_db_id: The germplasm_db_id of this ProgenyProgeny.  # noqa: E501
        :type germplasm_db_id: str
        :param parent_type: The parent_type of this ProgenyProgeny.  # noqa: E501
        :type parent_type: str
        """
        self.swagger_types = {
            'default_display_name': str,
            'germplasm_db_id': str,
            'parent_type': str
        }

        self.attribute_map = {
            'default_display_name': 'defaultDisplayName',
            'germplasm_db_id': 'germplasmDbId',
            'parent_type': 'parentType'
        }

        self._default_display_name = default_display_name
        self._germplasm_db_id = germplasm_db_id
        self._parent_type = parent_type

    @classmethod
    def from_dict(cls, dikt) -> 'ProgenyProgeny':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The progeny_progeny of this ProgenyProgeny.  # noqa: E501
        :rtype: ProgenyProgeny
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_display_name(self) -> str:
        """Gets the default_display_name of this ProgenyProgeny.


        :return: The default_display_name of this ProgenyProgeny.
        :rtype: str
        """
        return self._default_display_name

    @default_display_name.setter
    def default_display_name(self, default_display_name: str):
        """Sets the default_display_name of this ProgenyProgeny.


        :param default_display_name: The default_display_name of this ProgenyProgeny.
        :type default_display_name: str
        """

        self._default_display_name = default_display_name

    @property
    def germplasm_db_id(self) -> str:
        """Gets the germplasm_db_id of this ProgenyProgeny.


        :return: The germplasm_db_id of this ProgenyProgeny.
        :rtype: str
        """
        return self._germplasm_db_id

    @germplasm_db_id.setter
    def germplasm_db_id(self, germplasm_db_id: str):
        """Sets the germplasm_db_id of this ProgenyProgeny.


        :param germplasm_db_id: The germplasm_db_id of this ProgenyProgeny.
        :type germplasm_db_id: str
        """

        self._germplasm_db_id = germplasm_db_id

    @property
    def parent_type(self) -> str:
        """Gets the parent_type of this ProgenyProgeny.


        :return: The parent_type of this ProgenyProgeny.
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type: str):
        """Sets the parent_type of this ProgenyProgeny.


        :param parent_type: The parent_type of this ProgenyProgeny.
        :type parent_type: str
        """
        allowed_values = ["MALE", "FEMALE", "SELF", "POPULATION"]  # noqa: E501
        if parent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_type` ({0}), must be one of {1}"
                .format(parent_type, allowed_values)
            )

        self._parent_type = parent_type
