# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class NewObservationsTableRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, data: List[List[str]]=None, header_row: List[str]=None, metadata: str=None, observation_variable_db_ids: List[str]=None, result: str=None):  # noqa: E501
        """NewObservationsTableRequest - a model defined in Swagger

        :param data: The data of this NewObservationsTableRequest.  # noqa: E501
        :type data: List[List[str]]
        :param header_row: The header_row of this NewObservationsTableRequest.  # noqa: E501
        :type header_row: List[str]
        :param metadata: The metadata of this NewObservationsTableRequest.  # noqa: E501
        :type metadata: str
        :param observation_variable_db_ids: The observation_variable_db_ids of this NewObservationsTableRequest.  # noqa: E501
        :type observation_variable_db_ids: List[str]
        :param result: The result of this NewObservationsTableRequest.  # noqa: E501
        :type result: str
        """
        self.swagger_types = {
            'data': List[List[str]],
            'header_row': List[str],
            'metadata': str,
            'observation_variable_db_ids': List[str],
            'result': str
        }

        self.attribute_map = {
            'data': 'data',
            'header_row': 'headerRow',
            'metadata': 'metadata',
            'observation_variable_db_ids': 'observationVariableDbIds',
            'result': 'result'
        }

        self._data = data
        self._header_row = header_row
        self._metadata = metadata
        self._observation_variable_db_ids = observation_variable_db_ids
        self._result = result

    @classmethod
    def from_dict(cls, dikt) -> 'NewObservationsTableRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The newObservationsTableRequest of this NewObservationsTableRequest.  # noqa: E501
        :rtype: NewObservationsTableRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[List[str]]:
        """Gets the data of this NewObservationsTableRequest.

        Matrix of observation data recorded for different observation variables across different observation units  # noqa: E501

        :return: The data of this NewObservationsTableRequest.
        :rtype: List[List[str]]
        """
        return self._data

    @data.setter
    def data(self, data: List[List[str]]):
        """Sets the data of this NewObservationsTableRequest.

        Matrix of observation data recorded for different observation variables across different observation units  # noqa: E501

        :param data: The data of this NewObservationsTableRequest.
        :type data: List[List[str]]
        """

        self._data = data

    @property
    def header_row(self) -> List[str]:
        """Gets the header_row of this NewObservationsTableRequest.

        The header row describing the data matrix. Append 'observationVariableDbIds' for complete header row.  # noqa: E501

        :return: The header_row of this NewObservationsTableRequest.
        :rtype: List[str]
        """
        return self._header_row

    @header_row.setter
    def header_row(self, header_row: List[str]):
        """Sets the header_row of this NewObservationsTableRequest.

        The header row describing the data matrix. Append 'observationVariableDbIds' for complete header row.  # noqa: E501

        :param header_row: The header_row of this NewObservationsTableRequest.
        :type header_row: List[str]
        """

        self._header_row = header_row

    @property
    def metadata(self) -> str:
        """Gets the metadata of this NewObservationsTableRequest.

        DEPRECATED  # noqa: E501

        :return: The metadata of this NewObservationsTableRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: str):
        """Sets the metadata of this NewObservationsTableRequest.

        DEPRECATED  # noqa: E501

        :param metadata: The metadata of this NewObservationsTableRequest.
        :type metadata: str
        """

        self._metadata = metadata

    @property
    def observation_variable_db_ids(self) -> List[str]:
        """Gets the observation_variable_db_ids of this NewObservationsTableRequest.

        The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for comlete header row.  # noqa: E501

        :return: The observation_variable_db_ids of this NewObservationsTableRequest.
        :rtype: List[str]
        """
        return self._observation_variable_db_ids

    @observation_variable_db_ids.setter
    def observation_variable_db_ids(self, observation_variable_db_ids: List[str]):
        """Sets the observation_variable_db_ids of this NewObservationsTableRequest.

        The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for comlete header row.  # noqa: E501

        :param observation_variable_db_ids: The observation_variable_db_ids of this NewObservationsTableRequest.
        :type observation_variable_db_ids: List[str]
        """

        self._observation_variable_db_ids = observation_variable_db_ids

    @property
    def result(self) -> str:
        """Gets the result of this NewObservationsTableRequest.

        DEPRECATED  # noqa: E501

        :return: The result of this NewObservationsTableRequest.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this NewObservationsTableRequest.

        DEPRECATED  # noqa: E501

        :param result: The result of this NewObservationsTableRequest.
        :type result: str
        """

        self._result = result
