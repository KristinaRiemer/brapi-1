# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class Call(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, call: str=None, datatypes: List[str]=None, methods: List[str]=None, versions: List[str]=None):  # noqa: E501
        """Call - a model defined in Swagger

        :param call: The call of this Call.  # noqa: E501
        :type call: str
        :param datatypes: The datatypes of this Call.  # noqa: E501
        :type datatypes: List[str]
        :param methods: The methods of this Call.  # noqa: E501
        :type methods: List[str]
        :param versions: The versions of this Call.  # noqa: E501
        :type versions: List[str]
        """
        self.swagger_types = {
            'call': str,
            'datatypes': List[str],
            'methods': List[str],
            'versions': List[str]
        }

        self.attribute_map = {
            'call': 'call',
            'datatypes': 'datatypes',
            'methods': 'methods',
            'versions': 'versions'
        }

        self._call = call
        self._datatypes = datatypes
        self._methods = methods
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt) -> 'Call':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The call of this Call.  # noqa: E501
        :rtype: Call
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call(self) -> str:
        """Gets the call of this Call.

        The name of the available call as recorded in the documentation  # noqa: E501

        :return: The call of this Call.
        :rtype: str
        """
        return self._call

    @call.setter
    def call(self, call: str):
        """Sets the call of this Call.

        The name of the available call as recorded in the documentation  # noqa: E501

        :param call: The call of this Call.
        :type call: str
        """
        if call is None:
            raise ValueError("Invalid value for `call`, must not be `None`")  # noqa: E501

        self._call = call

    @property
    def datatypes(self) -> List[str]:
        """Gets the datatypes of this Call.

        The possible data formats returned by the available call  # noqa: E501

        :return: The datatypes of this Call.
        :rtype: List[str]
        """
        return self._datatypes

    @datatypes.setter
    def datatypes(self, datatypes: List[str]):
        """Sets the datatypes of this Call.

        The possible data formats returned by the available call  # noqa: E501

        :param datatypes: The datatypes of this Call.
        :type datatypes: List[str]
        """
        if datatypes is None:
            raise ValueError("Invalid value for `datatypes`, must not be `None`")  # noqa: E501

        self._datatypes = datatypes

    @property
    def methods(self) -> List[str]:
        """Gets the methods of this Call.

        The possible HTTP Methods to be used with the available call  # noqa: E501

        :return: The methods of this Call.
        :rtype: List[str]
        """
        return self._methods

    @methods.setter
    def methods(self, methods: List[str]):
        """Sets the methods of this Call.

        The possible HTTP Methods to be used with the available call  # noqa: E501

        :param methods: The methods of this Call.
        :type methods: List[str]
        """
        if methods is None:
            raise ValueError("Invalid value for `methods`, must not be `None`")  # noqa: E501

        self._methods = methods

    @property
    def versions(self) -> List[str]:
        """Gets the versions of this Call.

        The supported versions of a particular call  # noqa: E501

        :return: The versions of this Call.
        :rtype: List[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[str]):
        """Sets the versions of this Call.

        The supported versions of a particular call  # noqa: E501

        :param versions: The versions of this Call.
        :type versions: List[str]
        """
        allowed_values = ["1.0", "1.1", "1.2", "1.3"]  # noqa: E501
        if not set(versions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `versions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(versions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._versions = versions
