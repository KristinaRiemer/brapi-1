# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.vendor_specification_standard_requirement_blank_well_position import VendorSpecificationStandardRequirementBlankWellPosition  # noqa: F401,E501
from bety_brapi import util


class VendorSpecificationStandardRequirement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, blank_well_position: VendorSpecificationStandardRequirementBlankWellPosition=None, input_format_details: str=None, input_formats: List[str]=None, max_concentration: str=None, max_volume: str=None, min_concentration: str=None, min_sample_number: str=None, min_volume: str=None, plate_orientation: str=None, sample_type_details: str=None, sample_types: List[str]=None):  # noqa: E501
        """VendorSpecificationStandardRequirement - a model defined in Swagger

        :param blank_well_position: The blank_well_position of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type blank_well_position: VendorSpecificationStandardRequirementBlankWellPosition
        :param input_format_details: The input_format_details of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type input_format_details: str
        :param input_formats: The input_formats of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type input_formats: List[str]
        :param max_concentration: The max_concentration of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type max_concentration: str
        :param max_volume: The max_volume of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type max_volume: str
        :param min_concentration: The min_concentration of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type min_concentration: str
        :param min_sample_number: The min_sample_number of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type min_sample_number: str
        :param min_volume: The min_volume of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type min_volume: str
        :param plate_orientation: The plate_orientation of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type plate_orientation: str
        :param sample_type_details: The sample_type_details of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type sample_type_details: str
        :param sample_types: The sample_types of this VendorSpecificationStandardRequirement.  # noqa: E501
        :type sample_types: List[str]
        """
        self.swagger_types = {
            'blank_well_position': VendorSpecificationStandardRequirementBlankWellPosition,
            'input_format_details': str,
            'input_formats': List[str],
            'max_concentration': str,
            'max_volume': str,
            'min_concentration': str,
            'min_sample_number': str,
            'min_volume': str,
            'plate_orientation': str,
            'sample_type_details': str,
            'sample_types': List[str]
        }

        self.attribute_map = {
            'blank_well_position': 'blankWellPosition',
            'input_format_details': 'inputFormatDetails',
            'input_formats': 'inputFormats',
            'max_concentration': 'maxConcentration',
            'max_volume': 'maxVolume',
            'min_concentration': 'minConcentration',
            'min_sample_number': 'minSampleNumber',
            'min_volume': 'minVolume',
            'plate_orientation': 'plateOrientation',
            'sample_type_details': 'sampleTypeDetails',
            'sample_types': 'sampleTypes'
        }

        self._blank_well_position = blank_well_position
        self._input_format_details = input_format_details
        self._input_formats = input_formats
        self._max_concentration = max_concentration
        self._max_volume = max_volume
        self._min_concentration = min_concentration
        self._min_sample_number = min_sample_number
        self._min_volume = min_volume
        self._plate_orientation = plate_orientation
        self._sample_type_details = sample_type_details
        self._sample_types = sample_types

    @classmethod
    def from_dict(cls, dikt) -> 'VendorSpecificationStandardRequirement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The vendorSpecificationStandardRequirement of this VendorSpecificationStandardRequirement.  # noqa: E501
        :rtype: VendorSpecificationStandardRequirement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blank_well_position(self) -> VendorSpecificationStandardRequirementBlankWellPosition:
        """Gets the blank_well_position of this VendorSpecificationStandardRequirement.


        :return: The blank_well_position of this VendorSpecificationStandardRequirement.
        :rtype: VendorSpecificationStandardRequirementBlankWellPosition
        """
        return self._blank_well_position

    @blank_well_position.setter
    def blank_well_position(self, blank_well_position: VendorSpecificationStandardRequirementBlankWellPosition):
        """Sets the blank_well_position of this VendorSpecificationStandardRequirement.


        :param blank_well_position: The blank_well_position of this VendorSpecificationStandardRequirement.
        :type blank_well_position: VendorSpecificationStandardRequirementBlankWellPosition
        """

        self._blank_well_position = blank_well_position

    @property
    def input_format_details(self) -> str:
        """Gets the input_format_details of this VendorSpecificationStandardRequirement.

        Human readable details about the accepted input formats  # noqa: E501

        :return: The input_format_details of this VendorSpecificationStandardRequirement.
        :rtype: str
        """
        return self._input_format_details

    @input_format_details.setter
    def input_format_details(self, input_format_details: str):
        """Sets the input_format_details of this VendorSpecificationStandardRequirement.

        Human readable details about the accepted input formats  # noqa: E501

        :param input_format_details: The input_format_details of this VendorSpecificationStandardRequirement.
        :type input_format_details: str
        """

        self._input_format_details = input_format_details

    @property
    def input_formats(self) -> List[str]:
        """Gets the input_formats of this VendorSpecificationStandardRequirement.

        List of accepted data formats  # noqa: E501

        :return: The input_formats of this VendorSpecificationStandardRequirement.
        :rtype: List[str]
        """
        return self._input_formats

    @input_formats.setter
    def input_formats(self, input_formats: List[str]):
        """Sets the input_formats of this VendorSpecificationStandardRequirement.

        List of accepted data formats  # noqa: E501

        :param input_formats: The input_formats of this VendorSpecificationStandardRequirement.
        :type input_formats: List[str]
        """

        self._input_formats = input_formats

    @property
    def max_concentration(self) -> str:
        """Gets the max_concentration of this VendorSpecificationStandardRequirement.

        The maximum allowed concentration  # noqa: E501

        :return: The max_concentration of this VendorSpecificationStandardRequirement.
        :rtype: str
        """
        return self._max_concentration

    @max_concentration.setter
    def max_concentration(self, max_concentration: str):
        """Sets the max_concentration of this VendorSpecificationStandardRequirement.

        The maximum allowed concentration  # noqa: E501

        :param max_concentration: The max_concentration of this VendorSpecificationStandardRequirement.
        :type max_concentration: str
        """

        self._max_concentration = max_concentration

    @property
    def max_volume(self) -> str:
        """Gets the max_volume of this VendorSpecificationStandardRequirement.

        The minimum allowed volume of a sample  # noqa: E501

        :return: The max_volume of this VendorSpecificationStandardRequirement.
        :rtype: str
        """
        return self._max_volume

    @max_volume.setter
    def max_volume(self, max_volume: str):
        """Sets the max_volume of this VendorSpecificationStandardRequirement.

        The minimum allowed volume of a sample  # noqa: E501

        :param max_volume: The max_volume of this VendorSpecificationStandardRequirement.
        :type max_volume: str
        """

        self._max_volume = max_volume

    @property
    def min_concentration(self) -> str:
        """Gets the min_concentration of this VendorSpecificationStandardRequirement.

        the minimum allowed concentration of a sample  # noqa: E501

        :return: The min_concentration of this VendorSpecificationStandardRequirement.
        :rtype: str
        """
        return self._min_concentration

    @min_concentration.setter
    def min_concentration(self, min_concentration: str):
        """Sets the min_concentration of this VendorSpecificationStandardRequirement.

        the minimum allowed concentration of a sample  # noqa: E501

        :param min_concentration: The min_concentration of this VendorSpecificationStandardRequirement.
        :type min_concentration: str
        """

        self._min_concentration = min_concentration

    @property
    def min_sample_number(self) -> str:
        """Gets the min_sample_number of this VendorSpecificationStandardRequirement.

        The first sample number   # noqa: E501

        :return: The min_sample_number of this VendorSpecificationStandardRequirement.
        :rtype: str
        """
        return self._min_sample_number

    @min_sample_number.setter
    def min_sample_number(self, min_sample_number: str):
        """Sets the min_sample_number of this VendorSpecificationStandardRequirement.

        The first sample number   # noqa: E501

        :param min_sample_number: The min_sample_number of this VendorSpecificationStandardRequirement.
        :type min_sample_number: str
        """

        self._min_sample_number = min_sample_number

    @property
    def min_volume(self) -> str:
        """Gets the min_volume of this VendorSpecificationStandardRequirement.

        The minimum allowed volume of a sample  # noqa: E501

        :return: The min_volume of this VendorSpecificationStandardRequirement.
        :rtype: str
        """
        return self._min_volume

    @min_volume.setter
    def min_volume(self, min_volume: str):
        """Sets the min_volume of this VendorSpecificationStandardRequirement.

        The minimum allowed volume of a sample  # noqa: E501

        :param min_volume: The min_volume of this VendorSpecificationStandardRequirement.
        :type min_volume: str
        """

        self._min_volume = min_volume

    @property
    def plate_orientation(self) -> str:
        """Gets the plate_orientation of this VendorSpecificationStandardRequirement.

        The orientation of a plate  # noqa: E501

        :return: The plate_orientation of this VendorSpecificationStandardRequirement.
        :rtype: str
        """
        return self._plate_orientation

    @plate_orientation.setter
    def plate_orientation(self, plate_orientation: str):
        """Sets the plate_orientation of this VendorSpecificationStandardRequirement.

        The orientation of a plate  # noqa: E501

        :param plate_orientation: The plate_orientation of this VendorSpecificationStandardRequirement.
        :type plate_orientation: str
        """

        self._plate_orientation = plate_orientation

    @property
    def sample_type_details(self) -> str:
        """Gets the sample_type_details of this VendorSpecificationStandardRequirement.

        Human readable details about the allowed sample types  # noqa: E501

        :return: The sample_type_details of this VendorSpecificationStandardRequirement.
        :rtype: str
        """
        return self._sample_type_details

    @sample_type_details.setter
    def sample_type_details(self, sample_type_details: str):
        """Sets the sample_type_details of this VendorSpecificationStandardRequirement.

        Human readable details about the allowed sample types  # noqa: E501

        :param sample_type_details: The sample_type_details of this VendorSpecificationStandardRequirement.
        :type sample_type_details: str
        """

        self._sample_type_details = sample_type_details

    @property
    def sample_types(self) -> List[str]:
        """Gets the sample_types of this VendorSpecificationStandardRequirement.

        List of allowed sample types  # noqa: E501

        :return: The sample_types of this VendorSpecificationStandardRequirement.
        :rtype: List[str]
        """
        return self._sample_types

    @sample_types.setter
    def sample_types(self, sample_types: List[str]):
        """Sets the sample_types of this VendorSpecificationStandardRequirement.

        List of allowed sample types  # noqa: E501

        :param sample_types: The sample_types of this VendorSpecificationStandardRequirement.
        :type sample_types: List[str]
        """

        self._sample_types = sample_types
