# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class Contact(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, contact_db_id: str=None, email: str=None, institute_name: str=None, name: str=None, orcid: str=None, type: str=None):  # noqa: E501
        """Contact - a model defined in Swagger

        :param contact_db_id: The contact_db_id of this Contact.  # noqa: E501
        :type contact_db_id: str
        :param email: The email of this Contact.  # noqa: E501
        :type email: str
        :param institute_name: The institute_name of this Contact.  # noqa: E501
        :type institute_name: str
        :param name: The name of this Contact.  # noqa: E501
        :type name: str
        :param orcid: The orcid of this Contact.  # noqa: E501
        :type orcid: str
        :param type: The type of this Contact.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'contact_db_id': str,
            'email': str,
            'institute_name': str,
            'name': str,
            'orcid': str,
            'type': str
        }

        self.attribute_map = {
            'contact_db_id': 'contactDbId',
            'email': 'email',
            'institute_name': 'instituteName',
            'name': 'name',
            'orcid': 'orcid',
            'type': 'type'
        }

        self._contact_db_id = contact_db_id
        self._email = email
        self._institute_name = institute_name
        self._name = name
        self._orcid = orcid
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The contact of this Contact.  # noqa: E501
        :rtype: Contact
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_db_id(self) -> str:
        """Gets the contact_db_id of this Contact.

        The ID which uniquely identifies this contact  # noqa: E501

        :return: The contact_db_id of this Contact.
        :rtype: str
        """
        return self._contact_db_id

    @contact_db_id.setter
    def contact_db_id(self, contact_db_id: str):
        """Sets the contact_db_id of this Contact.

        The ID which uniquely identifies this contact  # noqa: E501

        :param contact_db_id: The contact_db_id of this Contact.
        :type contact_db_id: str
        """

        self._contact_db_id = contact_db_id

    @property
    def email(self) -> str:
        """Gets the email of this Contact.

        The contacts email address   # noqa: E501

        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Contact.

        The contacts email address   # noqa: E501

        :param email: The email of this Contact.
        :type email: str
        """

        self._email = email

    @property
    def institute_name(self) -> str:
        """Gets the institute_name of this Contact.

        The name of the institution which this contact is part of  # noqa: E501

        :return: The institute_name of this Contact.
        :rtype: str
        """
        return self._institute_name

    @institute_name.setter
    def institute_name(self, institute_name: str):
        """Sets the institute_name of this Contact.

        The name of the institution which this contact is part of  # noqa: E501

        :param institute_name: The institute_name of this Contact.
        :type institute_name: str
        """

        self._institute_name = institute_name

    @property
    def name(self) -> str:
        """Gets the name of this Contact.

        The full name of this contact person  # noqa: E501

        :return: The name of this Contact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Contact.

        The full name of this contact person  # noqa: E501

        :param name: The name of this Contact.
        :type name: str
        """

        self._name = name

    @property
    def orcid(self) -> str:
        """Gets the orcid of this Contact.

        The Open Researcher and Contributor ID for this contact person (orcid.org)  # noqa: E501

        :return: The orcid of this Contact.
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid: str):
        """Sets the orcid of this Contact.

        The Open Researcher and Contributor ID for this contact person (orcid.org)  # noqa: E501

        :param orcid: The orcid of this Contact.
        :type orcid: str
        """

        self._orcid = orcid

    @property
    def type(self) -> str:
        """Gets the type of this Contact.

        The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)  # noqa: E501

        :return: The type of this Contact.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Contact.

        The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)  # noqa: E501

        :param type: The type of this Contact.
        :type type: str
        """

        self._type = type
