# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class GermplasmSearchRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, accession_numbers: List[str]=None, common_crop_names: List[str]=None, germplasm_db_ids: List[str]=None, germplasm_genus: List[str]=None, germplasm_names: List[str]=None, germplasm_pu_is: List[str]=None, germplasm_species: List[str]=None, page: int=None, page_size: int=None):  # noqa: E501
        """GermplasmSearchRequest - a model defined in Swagger

        :param accession_numbers: The accession_numbers of this GermplasmSearchRequest.  # noqa: E501
        :type accession_numbers: List[str]
        :param common_crop_names: The common_crop_names of this GermplasmSearchRequest.  # noqa: E501
        :type common_crop_names: List[str]
        :param germplasm_db_ids: The germplasm_db_ids of this GermplasmSearchRequest.  # noqa: E501
        :type germplasm_db_ids: List[str]
        :param germplasm_genus: The germplasm_genus of this GermplasmSearchRequest.  # noqa: E501
        :type germplasm_genus: List[str]
        :param germplasm_names: The germplasm_names of this GermplasmSearchRequest.  # noqa: E501
        :type germplasm_names: List[str]
        :param germplasm_pu_is: The germplasm_pu_is of this GermplasmSearchRequest.  # noqa: E501
        :type germplasm_pu_is: List[str]
        :param germplasm_species: The germplasm_species of this GermplasmSearchRequest.  # noqa: E501
        :type germplasm_species: List[str]
        :param page: The page of this GermplasmSearchRequest.  # noqa: E501
        :type page: int
        :param page_size: The page_size of this GermplasmSearchRequest.  # noqa: E501
        :type page_size: int
        """
        self.swagger_types = {
            'accession_numbers': List[str],
            'common_crop_names': List[str],
            'germplasm_db_ids': List[str],
            'germplasm_genus': List[str],
            'germplasm_names': List[str],
            'germplasm_pu_is': List[str],
            'germplasm_species': List[str],
            'page': int,
            'page_size': int
        }

        self.attribute_map = {
            'accession_numbers': 'accessionNumbers',
            'common_crop_names': 'commonCropNames',
            'germplasm_db_ids': 'germplasmDbIds',
            'germplasm_genus': 'germplasmGenus',
            'germplasm_names': 'germplasmNames',
            'germplasm_pu_is': 'germplasmPUIs',
            'germplasm_species': 'germplasmSpecies',
            'page': 'page',
            'page_size': 'pageSize'
        }

        self._accession_numbers = accession_numbers
        self._common_crop_names = common_crop_names
        self._germplasm_db_ids = germplasm_db_ids
        self._germplasm_genus = germplasm_genus
        self._germplasm_names = germplasm_names
        self._germplasm_pu_is = germplasm_pu_is
        self._germplasm_species = germplasm_species
        self._page = page
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt) -> 'GermplasmSearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The germplasmSearchRequest of this GermplasmSearchRequest.  # noqa: E501
        :rtype: GermplasmSearchRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accession_numbers(self) -> List[str]:
        """Gets the accession_numbers of this GermplasmSearchRequest.

        List unique identifiers for accessions within a genebank  # noqa: E501

        :return: The accession_numbers of this GermplasmSearchRequest.
        :rtype: List[str]
        """
        return self._accession_numbers

    @accession_numbers.setter
    def accession_numbers(self, accession_numbers: List[str]):
        """Sets the accession_numbers of this GermplasmSearchRequest.

        List unique identifiers for accessions within a genebank  # noqa: E501

        :param accession_numbers: The accession_numbers of this GermplasmSearchRequest.
        :type accession_numbers: List[str]
        """

        self._accession_numbers = accession_numbers

    @property
    def common_crop_names(self) -> List[str]:
        """Gets the common_crop_names of this GermplasmSearchRequest.

        List crops to search by  # noqa: E501

        :return: The common_crop_names of this GermplasmSearchRequest.
        :rtype: List[str]
        """
        return self._common_crop_names

    @common_crop_names.setter
    def common_crop_names(self, common_crop_names: List[str]):
        """Sets the common_crop_names of this GermplasmSearchRequest.

        List crops to search by  # noqa: E501

        :param common_crop_names: The common_crop_names of this GermplasmSearchRequest.
        :type common_crop_names: List[str]
        """

        self._common_crop_names = common_crop_names

    @property
    def germplasm_db_ids(self) -> List[str]:
        """Gets the germplasm_db_ids of this GermplasmSearchRequest.

        List of IDs which uniquely identify germplasm  # noqa: E501

        :return: The germplasm_db_ids of this GermplasmSearchRequest.
        :rtype: List[str]
        """
        return self._germplasm_db_ids

    @germplasm_db_ids.setter
    def germplasm_db_ids(self, germplasm_db_ids: List[str]):
        """Sets the germplasm_db_ids of this GermplasmSearchRequest.

        List of IDs which uniquely identify germplasm  # noqa: E501

        :param germplasm_db_ids: The germplasm_db_ids of this GermplasmSearchRequest.
        :type germplasm_db_ids: List[str]
        """

        self._germplasm_db_ids = germplasm_db_ids

    @property
    def germplasm_genus(self) -> List[str]:
        """Gets the germplasm_genus of this GermplasmSearchRequest.

        List of Genus names to identify germplasm  # noqa: E501

        :return: The germplasm_genus of this GermplasmSearchRequest.
        :rtype: List[str]
        """
        return self._germplasm_genus

    @germplasm_genus.setter
    def germplasm_genus(self, germplasm_genus: List[str]):
        """Sets the germplasm_genus of this GermplasmSearchRequest.

        List of Genus names to identify germplasm  # noqa: E501

        :param germplasm_genus: The germplasm_genus of this GermplasmSearchRequest.
        :type germplasm_genus: List[str]
        """

        self._germplasm_genus = germplasm_genus

    @property
    def germplasm_names(self) -> List[str]:
        """Gets the germplasm_names of this GermplasmSearchRequest.

        List of human readable names to identify germplasm  # noqa: E501

        :return: The germplasm_names of this GermplasmSearchRequest.
        :rtype: List[str]
        """
        return self._germplasm_names

    @germplasm_names.setter
    def germplasm_names(self, germplasm_names: List[str]):
        """Sets the germplasm_names of this GermplasmSearchRequest.

        List of human readable names to identify germplasm  # noqa: E501

        :param germplasm_names: The germplasm_names of this GermplasmSearchRequest.
        :type germplasm_names: List[str]
        """

        self._germplasm_names = germplasm_names

    @property
    def germplasm_pu_is(self) -> List[str]:
        """Gets the germplasm_pu_is of this GermplasmSearchRequest.

        List of Permanent Unique Identifiers to identify germplasm  # noqa: E501

        :return: The germplasm_pu_is of this GermplasmSearchRequest.
        :rtype: List[str]
        """
        return self._germplasm_pu_is

    @germplasm_pu_is.setter
    def germplasm_pu_is(self, germplasm_pu_is: List[str]):
        """Sets the germplasm_pu_is of this GermplasmSearchRequest.

        List of Permanent Unique Identifiers to identify germplasm  # noqa: E501

        :param germplasm_pu_is: The germplasm_pu_is of this GermplasmSearchRequest.
        :type germplasm_pu_is: List[str]
        """

        self._germplasm_pu_is = germplasm_pu_is

    @property
    def germplasm_species(self) -> List[str]:
        """Gets the germplasm_species of this GermplasmSearchRequest.

        List of Species names to identify germplasm  # noqa: E501

        :return: The germplasm_species of this GermplasmSearchRequest.
        :rtype: List[str]
        """
        return self._germplasm_species

    @germplasm_species.setter
    def germplasm_species(self, germplasm_species: List[str]):
        """Sets the germplasm_species of this GermplasmSearchRequest.

        List of Species names to identify germplasm  # noqa: E501

        :param germplasm_species: The germplasm_species of this GermplasmSearchRequest.
        :type germplasm_species: List[str]
        """

        self._germplasm_species = germplasm_species

    @property
    def page(self) -> int:
        """Gets the page of this GermplasmSearchRequest.

        Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.  # noqa: E501

        :return: The page of this GermplasmSearchRequest.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this GermplasmSearchRequest.

        Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.  # noqa: E501

        :param page: The page of this GermplasmSearchRequest.
        :type page: int
        """

        self._page = page

    @property
    def page_size(self) -> int:
        """Gets the page_size of this GermplasmSearchRequest.

        The maximum number of items to return per page of the \"data\" array. Default is 1000.  # noqa: E501

        :return: The page_size of this GermplasmSearchRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: int):
        """Sets the page_size of this GermplasmSearchRequest.

        The maximum number of items to return per page of the \"data\" array. Default is 1000.  # noqa: E501

        :param page_size: The page_size of this GermplasmSearchRequest.
        :type page_size: int
        """

        self._page_size = page_size
