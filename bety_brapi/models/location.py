# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class Location(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, abreviation: str=None, additional_info: Dict[str, str]=None, altitude: float=None, country_code: str=None, country_name: str=None, institute_address: str=None, institute_adress: str=None, institute_name: str=None, latitude: float=None, location_db_id: str=None, location_name: str=None, location_type: str=None, longitude: float=None, name: str=None):  # noqa: E501
        """Location - a model defined in Swagger

        :param abbreviation: The abbreviation of this Location.  # noqa: E501
        :type abbreviation: str
        :param abreviation: The abreviation of this Location.  # noqa: E501
        :type abreviation: str
        :param additional_info: The additional_info of this Location.  # noqa: E501
        :type additional_info: Dict[str, str]
        :param altitude: The altitude of this Location.  # noqa: E501
        :type altitude: float
        :param country_code: The country_code of this Location.  # noqa: E501
        :type country_code: str
        :param country_name: The country_name of this Location.  # noqa: E501
        :type country_name: str
        :param institute_address: The institute_address of this Location.  # noqa: E501
        :type institute_address: str
        :param institute_adress: The institute_adress of this Location.  # noqa: E501
        :type institute_adress: str
        :param institute_name: The institute_name of this Location.  # noqa: E501
        :type institute_name: str
        :param latitude: The latitude of this Location.  # noqa: E501
        :type latitude: float
        :param location_db_id: The location_db_id of this Location.  # noqa: E501
        :type location_db_id: str
        :param location_name: The location_name of this Location.  # noqa: E501
        :type location_name: str
        :param location_type: The location_type of this Location.  # noqa: E501
        :type location_type: str
        :param longitude: The longitude of this Location.  # noqa: E501
        :type longitude: float
        :param name: The name of this Location.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'abbreviation': str,
            'abreviation': str,
            'additional_info': Dict[str, str],
            'altitude': float,
            'country_code': str,
            'country_name': str,
            'institute_address': str,
            'institute_adress': str,
            'institute_name': str,
            'latitude': float,
            'location_db_id': str,
            'location_name': str,
            'location_type': str,
            'longitude': float,
            'name': str
        }

        self.attribute_map = {
            'abbreviation': 'abbreviation',
            'abreviation': 'abreviation',
            'additional_info': 'additionalInfo',
            'altitude': 'altitude',
            'country_code': 'countryCode',
            'country_name': 'countryName',
            'institute_address': 'instituteAddress',
            'institute_adress': 'instituteAdress',
            'institute_name': 'instituteName',
            'latitude': 'latitude',
            'location_db_id': 'locationDbId',
            'location_name': 'locationName',
            'location_type': 'locationType',
            'longitude': 'longitude',
            'name': 'name'
        }

        self._abbreviation = abbreviation
        self._abreviation = abreviation
        self._additional_info = additional_info
        self._altitude = altitude
        self._country_code = country_code
        self._country_name = country_name
        self._institute_address = institute_address
        self._institute_adress = institute_adress
        self._institute_name = institute_name
        self._latitude = latitude
        self._location_db_id = location_db_id
        self._location_name = location_name
        self._location_type = location_type
        self._longitude = longitude
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The location of this Location.  # noqa: E501
        :rtype: Location
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self) -> str:
        """Gets the abbreviation of this Location.

        An abbreviation which represents this location  # noqa: E501

        :return: The abbreviation of this Location.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation: str):
        """Sets the abbreviation of this Location.

        An abbreviation which represents this location  # noqa: E501

        :param abbreviation: The abbreviation of this Location.
        :type abbreviation: str
        """

        self._abbreviation = abbreviation

    @property
    def abreviation(self) -> str:
        """Gets the abreviation of this Location.

        Deprecated  <strong>Use abbreviation</strong>   # noqa: E501

        :return: The abreviation of this Location.
        :rtype: str
        """
        return self._abreviation

    @abreviation.setter
    def abreviation(self, abreviation: str):
        """Sets the abreviation of this Location.

        Deprecated  <strong>Use abbreviation</strong>   # noqa: E501

        :param abreviation: The abreviation of this Location.
        :type abreviation: str
        """

        self._abreviation = abreviation

    @property
    def additional_info(self) -> Dict[str, str]:
        """Gets the additional_info of this Location.

        Additional arbitrary info  # noqa: E501

        :return: The additional_info of this Location.
        :rtype: Dict[str, str]
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info: Dict[str, str]):
        """Sets the additional_info of this Location.

        Additional arbitrary info  # noqa: E501

        :param additional_info: The additional_info of this Location.
        :type additional_info: Dict[str, str]
        """

        self._additional_info = additional_info

    @property
    def altitude(self) -> float:
        """Gets the altitude of this Location.

        The altitude of this location  # noqa: E501

        :return: The altitude of this Location.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude: float):
        """Sets the altitude of this Location.

        The altitude of this location  # noqa: E501

        :param altitude: The altitude of this Location.
        :type altitude: float
        """

        self._altitude = altitude

    @property
    def country_code(self) -> str:
        """Gets the country_code of this Location.

        [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec  # noqa: E501

        :return: The country_code of this Location.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code: str):
        """Sets the country_code of this Location.

        [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec  # noqa: E501

        :param country_code: The country_code of this Location.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def country_name(self) -> str:
        """Gets the country_name of this Location.

        The full name of the country where this location is  # noqa: E501

        :return: The country_name of this Location.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name: str):
        """Sets the country_name of this Location.

        The full name of the country where this location is  # noqa: E501

        :param country_name: The country_name of this Location.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def institute_address(self) -> str:
        """Gets the institute_address of this Location.

        The street address of the institute representing this location  # noqa: E501

        :return: The institute_address of this Location.
        :rtype: str
        """
        return self._institute_address

    @institute_address.setter
    def institute_address(self, institute_address: str):
        """Sets the institute_address of this Location.

        The street address of the institute representing this location  # noqa: E501

        :param institute_address: The institute_address of this Location.
        :type institute_address: str
        """

        self._institute_address = institute_address

    @property
    def institute_adress(self) -> str:
        """Gets the institute_adress of this Location.

        Deprecated  <strong>Use instituteAddress</strong>   # noqa: E501

        :return: The institute_adress of this Location.
        :rtype: str
        """
        return self._institute_adress

    @institute_adress.setter
    def institute_adress(self, institute_adress: str):
        """Sets the institute_adress of this Location.

        Deprecated  <strong>Use instituteAddress</strong>   # noqa: E501

        :param institute_adress: The institute_adress of this Location.
        :type institute_adress: str
        """

        self._institute_adress = institute_adress

    @property
    def institute_name(self) -> str:
        """Gets the institute_name of this Location.

        each institute/laboratory can have several experimental field  # noqa: E501

        :return: The institute_name of this Location.
        :rtype: str
        """
        return self._institute_name

    @institute_name.setter
    def institute_name(self, institute_name: str):
        """Sets the institute_name of this Location.

        each institute/laboratory can have several experimental field  # noqa: E501

        :param institute_name: The institute_name of this Location.
        :type institute_name: str
        """

        self._institute_name = institute_name

    @property
    def latitude(self) -> float:
        """Gets the latitude of this Location.

        The latitude of this location  # noqa: E501

        :return: The latitude of this Location.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this Location.

        The latitude of this location  # noqa: E501

        :param latitude: The latitude of this Location.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def location_db_id(self) -> str:
        """Gets the location_db_id of this Location.

        string identifier  # noqa: E501

        :return: The location_db_id of this Location.
        :rtype: str
        """
        return self._location_db_id

    @location_db_id.setter
    def location_db_id(self, location_db_id: str):
        """Sets the location_db_id of this Location.

        string identifier  # noqa: E501

        :param location_db_id: The location_db_id of this Location.
        :type location_db_id: str
        """

        self._location_db_id = location_db_id

    @property
    def location_name(self) -> str:
        """Gets the location_name of this Location.

        A human readable name for this location  # noqa: E501

        :return: The location_name of this Location.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name: str):
        """Sets the location_name of this Location.

        A human readable name for this location  # noqa: E501

        :param location_name: The location_name of this Location.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def location_type(self) -> str:
        """Gets the location_type of this Location.

        The type of location this represents (ex. Breeding Location, Storage Location, etc)  # noqa: E501

        :return: The location_type of this Location.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type: str):
        """Sets the location_type of this Location.

        The type of location this represents (ex. Breeding Location, Storage Location, etc)  # noqa: E501

        :param location_type: The location_type of this Location.
        :type location_type: str
        """

        self._location_type = location_type

    @property
    def longitude(self) -> float:
        """Gets the longitude of this Location.

        the longitude of this location  # noqa: E501

        :return: The longitude of this Location.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this Location.

        the longitude of this location  # noqa: E501

        :param longitude: The longitude of this Location.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def name(self) -> str:
        """Gets the name of this Location.

        DEPRECATED in v1.3 - Use \"locationName\"  # noqa: E501

        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Location.

        DEPRECATED in v1.3 - Use \"locationName\"  # noqa: E501

        :param name: The name of this Location.
        :type name: str
        """

        self._name = name
