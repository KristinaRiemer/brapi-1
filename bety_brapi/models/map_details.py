# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.linkage_group import LinkageGroup  # noqa: F401,E501
from bety_brapi import util


class MapDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, data: List[LinkageGroup]=None, linkage_groups: List[LinkageGroup]=None, map_db_id: str=None, map_name: str=None, name: str=None, type: str=None, unit: str=None):  # noqa: E501
        """MapDetails - a model defined in Swagger

        :param data: The data of this MapDetails.  # noqa: E501
        :type data: List[LinkageGroup]
        :param linkage_groups: The linkage_groups of this MapDetails.  # noqa: E501
        :type linkage_groups: List[LinkageGroup]
        :param map_db_id: The map_db_id of this MapDetails.  # noqa: E501
        :type map_db_id: str
        :param map_name: The map_name of this MapDetails.  # noqa: E501
        :type map_name: str
        :param name: The name of this MapDetails.  # noqa: E501
        :type name: str
        :param type: The type of this MapDetails.  # noqa: E501
        :type type: str
        :param unit: The unit of this MapDetails.  # noqa: E501
        :type unit: str
        """
        self.swagger_types = {
            'data': List[LinkageGroup],
            'linkage_groups': List[LinkageGroup],
            'map_db_id': str,
            'map_name': str,
            'name': str,
            'type': str,
            'unit': str
        }

        self.attribute_map = {
            'data': 'data',
            'linkage_groups': 'linkageGroups',
            'map_db_id': 'mapDbId',
            'map_name': 'mapName',
            'name': 'name',
            'type': 'type',
            'unit': 'unit'
        }

        self._data = data
        self._linkage_groups = linkage_groups
        self._map_db_id = map_db_id
        self._map_name = map_name
        self._name = name
        self._type = type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'MapDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The mapDetails of this MapDetails.  # noqa: E501
        :rtype: MapDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[LinkageGroup]:
        """Gets the data of this MapDetails.

        List of linkage group details associated with a given map  # noqa: E501

        :return: The data of this MapDetails.
        :rtype: List[LinkageGroup]
        """
        return self._data

    @data.setter
    def data(self, data: List[LinkageGroup]):
        """Sets the data of this MapDetails.

        List of linkage group details associated with a given map  # noqa: E501

        :param data: The data of this MapDetails.
        :type data: List[LinkageGroup]
        """

        self._data = data

    @property
    def linkage_groups(self) -> List[LinkageGroup]:
        """Gets the linkage_groups of this MapDetails.

        **Deprecated** Use \"data\"  # noqa: E501

        :return: The linkage_groups of this MapDetails.
        :rtype: List[LinkageGroup]
        """
        return self._linkage_groups

    @linkage_groups.setter
    def linkage_groups(self, linkage_groups: List[LinkageGroup]):
        """Sets the linkage_groups of this MapDetails.

        **Deprecated** Use \"data\"  # noqa: E501

        :param linkage_groups: The linkage_groups of this MapDetails.
        :type linkage_groups: List[LinkageGroup]
        """

        self._linkage_groups = linkage_groups

    @property
    def map_db_id(self) -> str:
        """Gets the map_db_id of this MapDetails.

        The ID which uniquely identifies this genome map  # noqa: E501

        :return: The map_db_id of this MapDetails.
        :rtype: str
        """
        return self._map_db_id

    @map_db_id.setter
    def map_db_id(self, map_db_id: str):
        """Sets the map_db_id of this MapDetails.

        The ID which uniquely identifies this genome map  # noqa: E501

        :param map_db_id: The map_db_id of this MapDetails.
        :type map_db_id: str
        """

        self._map_db_id = map_db_id

    @property
    def map_name(self) -> str:
        """Gets the map_name of this MapDetails.

        A human readable name for this map  # noqa: E501

        :return: The map_name of this MapDetails.
        :rtype: str
        """
        return self._map_name

    @map_name.setter
    def map_name(self, map_name: str):
        """Sets the map_name of this MapDetails.

        A human readable name for this map  # noqa: E501

        :param map_name: The map_name of this MapDetails.
        :type map_name: str
        """

        self._map_name = map_name

    @property
    def name(self) -> str:
        """Gets the name of this MapDetails.

        DEPRECATED in v1.3 - Use \"mapName\"  # noqa: E501

        :return: The name of this MapDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MapDetails.

        DEPRECATED in v1.3 - Use \"mapName\"  # noqa: E501

        :param name: The name of this MapDetails.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this MapDetails.

        The type of map this represents, ussually \"Genetic\"  # noqa: E501

        :return: The type of this MapDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MapDetails.

        The type of map this represents, ussually \"Genetic\"  # noqa: E501

        :param type: The type of this MapDetails.
        :type type: str
        """

        self._type = type

    @property
    def unit(self) -> str:
        """Gets the unit of this MapDetails.

        The units used to describe the data in this map  # noqa: E501

        :return: The unit of this MapDetails.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this MapDetails.

        The units used to describe the data in this map  # noqa: E501

        :param unit: The unit of this MapDetails.
        :type unit: str
        """

        self._unit = unit
