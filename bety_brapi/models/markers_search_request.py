# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class MarkersSearchRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, include_synonyms: bool=None, marker_db_ids: List[str]=None, match_method: str=None, name: str=None, page: int=None, page_size: int=None, type: str=None):  # noqa: E501
        """MarkersSearchRequest - a model defined in Swagger

        :param include_synonyms: The include_synonyms of this MarkersSearchRequest.  # noqa: E501
        :type include_synonyms: bool
        :param marker_db_ids: The marker_db_ids of this MarkersSearchRequest.  # noqa: E501
        :type marker_db_ids: List[str]
        :param match_method: The match_method of this MarkersSearchRequest.  # noqa: E501
        :type match_method: str
        :param name: The name of this MarkersSearchRequest.  # noqa: E501
        :type name: str
        :param page: The page of this MarkersSearchRequest.  # noqa: E501
        :type page: int
        :param page_size: The page_size of this MarkersSearchRequest.  # noqa: E501
        :type page_size: int
        :param type: The type of this MarkersSearchRequest.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'include_synonyms': bool,
            'marker_db_ids': List[str],
            'match_method': str,
            'name': str,
            'page': int,
            'page_size': int,
            'type': str
        }

        self.attribute_map = {
            'include_synonyms': 'includeSynonyms',
            'marker_db_ids': 'markerDbIds',
            'match_method': 'matchMethod',
            'name': 'name',
            'page': 'page',
            'page_size': 'pageSize',
            'type': 'type'
        }

        self._include_synonyms = include_synonyms
        self._marker_db_ids = marker_db_ids
        self._match_method = match_method
        self._name = name
        self._page = page
        self._page_size = page_size
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'MarkersSearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The markersSearchRequest of this MarkersSearchRequest.  # noqa: E501
        :rtype: MarkersSearchRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_synonyms(self) -> bool:
        """Gets the include_synonyms of this MarkersSearchRequest.

        Should an array of synonyms be included in the response  # noqa: E501

        :return: The include_synonyms of this MarkersSearchRequest.
        :rtype: bool
        """
        return self._include_synonyms

    @include_synonyms.setter
    def include_synonyms(self, include_synonyms: bool):
        """Sets the include_synonyms of this MarkersSearchRequest.

        Should an array of synonyms be included in the response  # noqa: E501

        :param include_synonyms: The include_synonyms of this MarkersSearchRequest.
        :type include_synonyms: bool
        """

        self._include_synonyms = include_synonyms

    @property
    def marker_db_ids(self) -> List[str]:
        """Gets the marker_db_ids of this MarkersSearchRequest.

        List of IDs which uniquely identify markers   # noqa: E501

        :return: The marker_db_ids of this MarkersSearchRequest.
        :rtype: List[str]
        """
        return self._marker_db_ids

    @marker_db_ids.setter
    def marker_db_ids(self, marker_db_ids: List[str]):
        """Sets the marker_db_ids of this MarkersSearchRequest.

        List of IDs which uniquely identify markers   # noqa: E501

        :param marker_db_ids: The marker_db_ids of this MarkersSearchRequest.
        :type marker_db_ids: List[str]
        """

        self._marker_db_ids = marker_db_ids

    @property
    def match_method(self) -> str:
        """Gets the match_method of this MarkersSearchRequest.

        How to perform string matching during search. 'exact' will search for exact, case sensitive matches only. 'case_insensitive' will search for exact matches, but case insensitive. 'wildcard' will allow the special characters '*' (star) and '%' (percent) to represent variable length arbitrary strings, and the special character '?' (question) to represent one arbitrary character.  # noqa: E501

        :return: The match_method of this MarkersSearchRequest.
        :rtype: str
        """
        return self._match_method

    @match_method.setter
    def match_method(self, match_method: str):
        """Sets the match_method of this MarkersSearchRequest.

        How to perform string matching during search. 'exact' will search for exact, case sensitive matches only. 'case_insensitive' will search for exact matches, but case insensitive. 'wildcard' will allow the special characters '*' (star) and '%' (percent) to represent variable length arbitrary strings, and the special character '?' (question) to represent one arbitrary character.  # noqa: E501

        :param match_method: The match_method of this MarkersSearchRequest.
        :type match_method: str
        """
        allowed_values = ["exact", "case_insensitive", "wildcard"]  # noqa: E501
        if match_method not in allowed_values:
            raise ValueError(
                "Invalid value for `match_method` ({0}), must be one of {1}"
                .format(match_method, allowed_values)
            )

        self._match_method = match_method

    @property
    def name(self) -> str:
        """Gets the name of this MarkersSearchRequest.

        The search pattern for the marker name or synonym.  # noqa: E501

        :return: The name of this MarkersSearchRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MarkersSearchRequest.

        The search pattern for the marker name or synonym.  # noqa: E501

        :param name: The name of this MarkersSearchRequest.
        :type name: str
        """

        self._name = name

    @property
    def page(self) -> int:
        """Gets the page of this MarkersSearchRequest.

        Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.  # noqa: E501

        :return: The page of this MarkersSearchRequest.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this MarkersSearchRequest.

        Which page of the \"data\" array to return. The page indexing starts at 0 (page=0 will return the first page). Default is 0.  # noqa: E501

        :param page: The page of this MarkersSearchRequest.
        :type page: int
        """

        self._page = page

    @property
    def page_size(self) -> int:
        """Gets the page_size of this MarkersSearchRequest.

        The maximum number of items to return per page of the \"data\" array. Default is 1000.  # noqa: E501

        :return: The page_size of this MarkersSearchRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size: int):
        """Sets the page_size of this MarkersSearchRequest.

        The maximum number of items to return per page of the \"data\" array. Default is 1000.  # noqa: E501

        :param page_size: The page_size of this MarkersSearchRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def type(self) -> str:
        """Gets the type of this MarkersSearchRequest.

        The type of marker, e.g. SNP  # noqa: E501

        :return: The type of this MarkersSearchRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MarkersSearchRequest.

        The type of marker, e.g. SNP  # noqa: E501

        :param type: The type of this MarkersSearchRequest.
        :type type: str
        """

        self._type = type
