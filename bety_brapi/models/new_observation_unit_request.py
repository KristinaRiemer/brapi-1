# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.observation import Observation  # noqa: F401,E501
from bety_brapi.models.observation_treatment import ObservationTreatment  # noqa: F401,E501
from bety_brapi.models.observation_unit_xref import ObservationUnitXref  # noqa: F401,E501
from bety_brapi import util


class NewObservationUnitRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, x: str=None, y: str=None, block_number: str=None, entry_number: str=None, entry_type: str=None, germplasm_db_id: str=None, observation_level: str=None, observation_unit_db_id: str=None, observation_unit_name: str=None, observation_unit_xref: List[ObservationUnitXref]=None, observations: List[Observation]=None, plant_number: str=None, plot_number: str=None, position_coordinate_x: str=None, position_coordinate_x_type: str=None, position_coordinate_y: str=None, position_coordinate_y_type: str=None, replicate: str=None, study_db_id: str=None, treatments: List[ObservationTreatment]=None):  # noqa: E501
        """NewObservationUnitRequest - a model defined in Swagger

        :param x: The x of this NewObservationUnitRequest.  # noqa: E501
        :type x: str
        :param y: The y of this NewObservationUnitRequest.  # noqa: E501
        :type y: str
        :param block_number: The block_number of this NewObservationUnitRequest.  # noqa: E501
        :type block_number: str
        :param entry_number: The entry_number of this NewObservationUnitRequest.  # noqa: E501
        :type entry_number: str
        :param entry_type: The entry_type of this NewObservationUnitRequest.  # noqa: E501
        :type entry_type: str
        :param germplasm_db_id: The germplasm_db_id of this NewObservationUnitRequest.  # noqa: E501
        :type germplasm_db_id: str
        :param observation_level: The observation_level of this NewObservationUnitRequest.  # noqa: E501
        :type observation_level: str
        :param observation_unit_db_id: The observation_unit_db_id of this NewObservationUnitRequest.  # noqa: E501
        :type observation_unit_db_id: str
        :param observation_unit_name: The observation_unit_name of this NewObservationUnitRequest.  # noqa: E501
        :type observation_unit_name: str
        :param observation_unit_xref: The observation_unit_xref of this NewObservationUnitRequest.  # noqa: E501
        :type observation_unit_xref: List[ObservationUnitXref]
        :param observations: The observations of this NewObservationUnitRequest.  # noqa: E501
        :type observations: List[Observation]
        :param plant_number: The plant_number of this NewObservationUnitRequest.  # noqa: E501
        :type plant_number: str
        :param plot_number: The plot_number of this NewObservationUnitRequest.  # noqa: E501
        :type plot_number: str
        :param position_coordinate_x: The position_coordinate_x of this NewObservationUnitRequest.  # noqa: E501
        :type position_coordinate_x: str
        :param position_coordinate_x_type: The position_coordinate_x_type of this NewObservationUnitRequest.  # noqa: E501
        :type position_coordinate_x_type: str
        :param position_coordinate_y: The position_coordinate_y of this NewObservationUnitRequest.  # noqa: E501
        :type position_coordinate_y: str
        :param position_coordinate_y_type: The position_coordinate_y_type of this NewObservationUnitRequest.  # noqa: E501
        :type position_coordinate_y_type: str
        :param replicate: The replicate of this NewObservationUnitRequest.  # noqa: E501
        :type replicate: str
        :param study_db_id: The study_db_id of this NewObservationUnitRequest.  # noqa: E501
        :type study_db_id: str
        :param treatments: The treatments of this NewObservationUnitRequest.  # noqa: E501
        :type treatments: List[ObservationTreatment]
        """
        self.swagger_types = {
            'x': str,
            'y': str,
            'block_number': str,
            'entry_number': str,
            'entry_type': str,
            'germplasm_db_id': str,
            'observation_level': str,
            'observation_unit_db_id': str,
            'observation_unit_name': str,
            'observation_unit_xref': List[ObservationUnitXref],
            'observations': List[Observation],
            'plant_number': str,
            'plot_number': str,
            'position_coordinate_x': str,
            'position_coordinate_x_type': str,
            'position_coordinate_y': str,
            'position_coordinate_y_type': str,
            'replicate': str,
            'study_db_id': str,
            'treatments': List[ObservationTreatment]
        }

        self.attribute_map = {
            'x': 'X',
            'y': 'Y',
            'block_number': 'blockNumber',
            'entry_number': 'entryNumber',
            'entry_type': 'entryType',
            'germplasm_db_id': 'germplasmDbId',
            'observation_level': 'observationLevel',
            'observation_unit_db_id': 'observationUnitDbId',
            'observation_unit_name': 'observationUnitName',
            'observation_unit_xref': 'observationUnitXref',
            'observations': 'observations',
            'plant_number': 'plantNumber',
            'plot_number': 'plotNumber',
            'position_coordinate_x': 'positionCoordinateX',
            'position_coordinate_x_type': 'positionCoordinateXType',
            'position_coordinate_y': 'positionCoordinateY',
            'position_coordinate_y_type': 'positionCoordinateYType',
            'replicate': 'replicate',
            'study_db_id': 'studyDbId',
            'treatments': 'treatments'
        }

        self._x = x
        self._y = y
        self._block_number = block_number
        self._entry_number = entry_number
        self._entry_type = entry_type
        self._germplasm_db_id = germplasm_db_id
        self._observation_level = observation_level
        self._observation_unit_db_id = observation_unit_db_id
        self._observation_unit_name = observation_unit_name
        self._observation_unit_xref = observation_unit_xref
        self._observations = observations
        self._plant_number = plant_number
        self._plot_number = plot_number
        self._position_coordinate_x = position_coordinate_x
        self._position_coordinate_x_type = position_coordinate_x_type
        self._position_coordinate_y = position_coordinate_y
        self._position_coordinate_y_type = position_coordinate_y_type
        self._replicate = replicate
        self._study_db_id = study_db_id
        self._treatments = treatments

    @classmethod
    def from_dict(cls, dikt) -> 'NewObservationUnitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The newObservationUnitRequest of this NewObservationUnitRequest.  # noqa: E501
        :rtype: NewObservationUnitRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def x(self) -> str:
        """Gets the x of this NewObservationUnitRequest.

        DEPRECATED - use \"positionCoordinateX\"  # noqa: E501

        :return: The x of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._x

    @x.setter
    def x(self, x: str):
        """Sets the x of this NewObservationUnitRequest.

        DEPRECATED - use \"positionCoordinateX\"  # noqa: E501

        :param x: The x of this NewObservationUnitRequest.
        :type x: str
        """

        self._x = x

    @property
    def y(self) -> str:
        """Gets the y of this NewObservationUnitRequest.

        DEPRECATED - use \"positionCoordinateY\"  # noqa: E501

        :return: The y of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y: str):
        """Sets the y of this NewObservationUnitRequest.

        DEPRECATED - use \"positionCoordinateY\"  # noqa: E501

        :param y: The y of this NewObservationUnitRequest.
        :type y: str
        """

        self._y = y

    @property
    def block_number(self) -> str:
        """Gets the block_number of this NewObservationUnitRequest.

        The block number for an observation unit. Different systems may use different block designs.  # noqa: E501

        :return: The block_number of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number: str):
        """Sets the block_number of this NewObservationUnitRequest.

        The block number for an observation unit. Different systems may use different block designs.  # noqa: E501

        :param block_number: The block_number of this NewObservationUnitRequest.
        :type block_number: str
        """

        self._block_number = block_number

    @property
    def entry_number(self) -> str:
        """Gets the entry_number of this NewObservationUnitRequest.

        The entry number for an observation unit. Different systems may use different entry systems.  # noqa: E501

        :return: The entry_number of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._entry_number

    @entry_number.setter
    def entry_number(self, entry_number: str):
        """Sets the entry_number of this NewObservationUnitRequest.

        The entry number for an observation unit. Different systems may use different entry systems.  # noqa: E501

        :param entry_number: The entry_number of this NewObservationUnitRequest.
        :type entry_number: str
        """

        self._entry_number = entry_number

    @property
    def entry_type(self) -> str:
        """Gets the entry_type of this NewObservationUnitRequest.

        The type of entry for this observation unit. ex. \"check\", \"test\", \"filler\"  # noqa: E501

        :return: The entry_type of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type: str):
        """Sets the entry_type of this NewObservationUnitRequest.

        The type of entry for this observation unit. ex. \"check\", \"test\", \"filler\"  # noqa: E501

        :param entry_type: The entry_type of this NewObservationUnitRequest.
        :type entry_type: str
        """

        self._entry_type = entry_type

    @property
    def germplasm_db_id(self) -> str:
        """Gets the germplasm_db_id of this NewObservationUnitRequest.

         The ID which uniquely identifies a germplasm  # noqa: E501

        :return: The germplasm_db_id of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._germplasm_db_id

    @germplasm_db_id.setter
    def germplasm_db_id(self, germplasm_db_id: str):
        """Sets the germplasm_db_id of this NewObservationUnitRequest.

         The ID which uniquely identifies a germplasm  # noqa: E501

        :param germplasm_db_id: The germplasm_db_id of this NewObservationUnitRequest.
        :type germplasm_db_id: str
        """

        self._germplasm_db_id = germplasm_db_id

    @property
    def observation_level(self) -> str:
        """Gets the observation_level of this NewObservationUnitRequest.

        The level of an observation unit. ex. \"plot\", \"plant\"  # noqa: E501

        :return: The observation_level of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._observation_level

    @observation_level.setter
    def observation_level(self, observation_level: str):
        """Sets the observation_level of this NewObservationUnitRequest.

        The level of an observation unit. ex. \"plot\", \"plant\"  # noqa: E501

        :param observation_level: The observation_level of this NewObservationUnitRequest.
        :type observation_level: str
        """

        self._observation_level = observation_level

    @property
    def observation_unit_db_id(self) -> str:
        """Gets the observation_unit_db_id of this NewObservationUnitRequest.

        The ID which uniquely identifies an observation unit  # noqa: E501

        :return: The observation_unit_db_id of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._observation_unit_db_id

    @observation_unit_db_id.setter
    def observation_unit_db_id(self, observation_unit_db_id: str):
        """Sets the observation_unit_db_id of this NewObservationUnitRequest.

        The ID which uniquely identifies an observation unit  # noqa: E501

        :param observation_unit_db_id: The observation_unit_db_id of this NewObservationUnitRequest.
        :type observation_unit_db_id: str
        """

        self._observation_unit_db_id = observation_unit_db_id

    @property
    def observation_unit_name(self) -> str:
        """Gets the observation_unit_name of this NewObservationUnitRequest.

        A human readable name for an observation unit  # noqa: E501

        :return: The observation_unit_name of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._observation_unit_name

    @observation_unit_name.setter
    def observation_unit_name(self, observation_unit_name: str):
        """Sets the observation_unit_name of this NewObservationUnitRequest.

        A human readable name for an observation unit  # noqa: E501

        :param observation_unit_name: The observation_unit_name of this NewObservationUnitRequest.
        :type observation_unit_name: str
        """

        self._observation_unit_name = observation_unit_name

    @property
    def observation_unit_xref(self) -> List[ObservationUnitXref]:
        """Gets the observation_unit_xref of this NewObservationUnitRequest.

        A list of external references to this observation unit  # noqa: E501

        :return: The observation_unit_xref of this NewObservationUnitRequest.
        :rtype: List[ObservationUnitXref]
        """
        return self._observation_unit_xref

    @observation_unit_xref.setter
    def observation_unit_xref(self, observation_unit_xref: List[ObservationUnitXref]):
        """Sets the observation_unit_xref of this NewObservationUnitRequest.

        A list of external references to this observation unit  # noqa: E501

        :param observation_unit_xref: The observation_unit_xref of this NewObservationUnitRequest.
        :type observation_unit_xref: List[ObservationUnitXref]
        """

        self._observation_unit_xref = observation_unit_xref

    @property
    def observations(self) -> List[Observation]:
        """Gets the observations of this NewObservationUnitRequest.

        List of observations associated with this observation unit  # noqa: E501

        :return: The observations of this NewObservationUnitRequest.
        :rtype: List[Observation]
        """
        return self._observations

    @observations.setter
    def observations(self, observations: List[Observation]):
        """Sets the observations of this NewObservationUnitRequest.

        List of observations associated with this observation unit  # noqa: E501

        :param observations: The observations of this NewObservationUnitRequest.
        :type observations: List[Observation]
        """

        self._observations = observations

    @property
    def plant_number(self) -> str:
        """Gets the plant_number of this NewObservationUnitRequest.

        The plant number in a field. Applicable for observationLevel: \"plant\"  # noqa: E501

        :return: The plant_number of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._plant_number

    @plant_number.setter
    def plant_number(self, plant_number: str):
        """Sets the plant_number of this NewObservationUnitRequest.

        The plant number in a field. Applicable for observationLevel: \"plant\"  # noqa: E501

        :param plant_number: The plant_number of this NewObservationUnitRequest.
        :type plant_number: str
        """

        self._plant_number = plant_number

    @property
    def plot_number(self) -> str:
        """Gets the plot_number of this NewObservationUnitRequest.

        The plot number in a field. Applicable for observationLevel: \"plot\"  # noqa: E501

        :return: The plot_number of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._plot_number

    @plot_number.setter
    def plot_number(self, plot_number: str):
        """Sets the plot_number of this NewObservationUnitRequest.

        The plot number in a field. Applicable for observationLevel: \"plot\"  # noqa: E501

        :param plot_number: The plot_number of this NewObservationUnitRequest.
        :type plot_number: str
        """

        self._plot_number = plot_number

    @property
    def position_coordinate_x(self) -> str:
        """Gets the position_coordinate_x of this NewObservationUnitRequest.

        The X position coordinate for an observation unit. Different systems may use different coordinate systems.  # noqa: E501

        :return: The position_coordinate_x of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._position_coordinate_x

    @position_coordinate_x.setter
    def position_coordinate_x(self, position_coordinate_x: str):
        """Sets the position_coordinate_x of this NewObservationUnitRequest.

        The X position coordinate for an observation unit. Different systems may use different coordinate systems.  # noqa: E501

        :param position_coordinate_x: The position_coordinate_x of this NewObservationUnitRequest.
        :type position_coordinate_x: str
        """

        self._position_coordinate_x = position_coordinate_x

    @property
    def position_coordinate_x_type(self) -> str:
        """Gets the position_coordinate_x_type of this NewObservationUnitRequest.

        The type of positional coordinate used. Must be one of the following values LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details PLANTED_ROW - The physical planted row number  PLANTED_INDIVIDUAl - The physical counted number, could be independant or within a planted row GRID_ROW - The row index number of a square grid overlay GRID_COL - The column index number of a square grid overlay MEASURED_ROW - The distance in meters from a defined 0th row MEASURED_COL - The distance in meters from a defined 0th column   # noqa: E501

        :return: The position_coordinate_x_type of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._position_coordinate_x_type

    @position_coordinate_x_type.setter
    def position_coordinate_x_type(self, position_coordinate_x_type: str):
        """Sets the position_coordinate_x_type of this NewObservationUnitRequest.

        The type of positional coordinate used. Must be one of the following values LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details PLANTED_ROW - The physical planted row number  PLANTED_INDIVIDUAl - The physical counted number, could be independant or within a planted row GRID_ROW - The row index number of a square grid overlay GRID_COL - The column index number of a square grid overlay MEASURED_ROW - The distance in meters from a defined 0th row MEASURED_COL - The distance in meters from a defined 0th column   # noqa: E501

        :param position_coordinate_x_type: The position_coordinate_x_type of this NewObservationUnitRequest.
        :type position_coordinate_x_type: str
        """
        allowed_values = ["LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAl", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL"]  # noqa: E501
        if position_coordinate_x_type not in allowed_values:
            raise ValueError(
                "Invalid value for `position_coordinate_x_type` ({0}), must be one of {1}"
                .format(position_coordinate_x_type, allowed_values)
            )

        self._position_coordinate_x_type = position_coordinate_x_type

    @property
    def position_coordinate_y(self) -> str:
        """Gets the position_coordinate_y of this NewObservationUnitRequest.

        The Y position coordinate for an observation unit. Different systems may use different coordinate systems.  # noqa: E501

        :return: The position_coordinate_y of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._position_coordinate_y

    @position_coordinate_y.setter
    def position_coordinate_y(self, position_coordinate_y: str):
        """Sets the position_coordinate_y of this NewObservationUnitRequest.

        The Y position coordinate for an observation unit. Different systems may use different coordinate systems.  # noqa: E501

        :param position_coordinate_y: The position_coordinate_y of this NewObservationUnitRequest.
        :type position_coordinate_y: str
        """

        self._position_coordinate_y = position_coordinate_y

    @property
    def position_coordinate_y_type(self) -> str:
        """Gets the position_coordinate_y_type of this NewObservationUnitRequest.

        The type of positional coordinate used. Must be one of the following values LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details PLANTED_ROW - The physical planted row number  PLANTED_INDIVIDUAl - The physical counted number, could be independant or within a planted row GRID_ROW - The row index number of a square grid overlay GRID_COL - The column index number of a square grid overlay MEASURED_ROW - The distance in meters from a defined 0th row MEASURED_COL - The distance in meters from a defined 0th column   # noqa: E501

        :return: The position_coordinate_y_type of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._position_coordinate_y_type

    @position_coordinate_y_type.setter
    def position_coordinate_y_type(self, position_coordinate_y_type: str):
        """Sets the position_coordinate_y_type of this NewObservationUnitRequest.

        The type of positional coordinate used. Must be one of the following values LONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details LATITUDE - ISO 6709 standard, WGS84 geodetic datum. See \"Location Coordinate Encoding\" for details PLANTED_ROW - The physical planted row number  PLANTED_INDIVIDUAl - The physical counted number, could be independant or within a planted row GRID_ROW - The row index number of a square grid overlay GRID_COL - The column index number of a square grid overlay MEASURED_ROW - The distance in meters from a defined 0th row MEASURED_COL - The distance in meters from a defined 0th column   # noqa: E501

        :param position_coordinate_y_type: The position_coordinate_y_type of this NewObservationUnitRequest.
        :type position_coordinate_y_type: str
        """
        allowed_values = ["LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAl", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL"]  # noqa: E501
        if position_coordinate_y_type not in allowed_values:
            raise ValueError(
                "Invalid value for `position_coordinate_y_type` ({0}), must be one of {1}"
                .format(position_coordinate_y_type, allowed_values)
            )

        self._position_coordinate_y_type = position_coordinate_y_type

    @property
    def replicate(self) -> str:
        """Gets the replicate of this NewObservationUnitRequest.

        The replicate number of an observation unit. May be the same as blockNumber.  # noqa: E501

        :return: The replicate of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._replicate

    @replicate.setter
    def replicate(self, replicate: str):
        """Sets the replicate of this NewObservationUnitRequest.

        The replicate number of an observation unit. May be the same as blockNumber.  # noqa: E501

        :param replicate: The replicate of this NewObservationUnitRequest.
        :type replicate: str
        """

        self._replicate = replicate

    @property
    def study_db_id(self) -> str:
        """Gets the study_db_id of this NewObservationUnitRequest.

        The ID which uniquely identifies a study within the given database server  # noqa: E501

        :return: The study_db_id of this NewObservationUnitRequest.
        :rtype: str
        """
        return self._study_db_id

    @study_db_id.setter
    def study_db_id(self, study_db_id: str):
        """Sets the study_db_id of this NewObservationUnitRequest.

        The ID which uniquely identifies a study within the given database server  # noqa: E501

        :param study_db_id: The study_db_id of this NewObservationUnitRequest.
        :type study_db_id: str
        """

        self._study_db_id = study_db_id

    @property
    def treatments(self) -> List[ObservationTreatment]:
        """Gets the treatments of this NewObservationUnitRequest.

        List of treatments applied to an observation unit.  # noqa: E501

        :return: The treatments of this NewObservationUnitRequest.
        :rtype: List[ObservationTreatment]
        """
        return self._treatments

    @treatments.setter
    def treatments(self, treatments: List[ObservationTreatment]):
        """Sets the treatments of this NewObservationUnitRequest.

        List of treatments applied to an observation unit.  # noqa: E501

        :param treatments: The treatments of this NewObservationUnitRequest.
        :type treatments: List[ObservationTreatment]
        """

        self._treatments = treatments
