# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi import util


class TrialDatasetAuthorship(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, dataset_pui: str=None, license: str=None):  # noqa: E501
        """TrialDatasetAuthorship - a model defined in Swagger

        :param dataset_pui: The dataset_pui of this TrialDatasetAuthorship.  # noqa: E501
        :type dataset_pui: str
        :param license: The license of this TrialDatasetAuthorship.  # noqa: E501
        :type license: str
        """
        self.swagger_types = {
            'dataset_pui': str,
            'license': str
        }

        self.attribute_map = {
            'dataset_pui': 'datasetPUI',
            'license': 'license'
        }

        self._dataset_pui = dataset_pui
        self._license = license

    @classmethod
    def from_dict(cls, dikt) -> 'TrialDatasetAuthorship':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The trial_datasetAuthorship of this TrialDatasetAuthorship.  # noqa: E501
        :rtype: TrialDatasetAuthorship
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_pui(self) -> str:
        """Gets the dataset_pui of this TrialDatasetAuthorship.


        :return: The dataset_pui of this TrialDatasetAuthorship.
        :rtype: str
        """
        return self._dataset_pui

    @dataset_pui.setter
    def dataset_pui(self, dataset_pui: str):
        """Sets the dataset_pui of this TrialDatasetAuthorship.


        :param dataset_pui: The dataset_pui of this TrialDatasetAuthorship.
        :type dataset_pui: str
        """

        self._dataset_pui = dataset_pui

    @property
    def license(self) -> str:
        """Gets the license of this TrialDatasetAuthorship.


        :return: The license of this TrialDatasetAuthorship.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: str):
        """Sets the license of this TrialDatasetAuthorship.


        :param license: The license of this TrialDatasetAuthorship.
        :type license: str
        """

        self._license = license
