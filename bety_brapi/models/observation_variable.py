# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from bety_brapi.models.base_model_ import Model
from bety_brapi.models.method import Method  # noqa: F401,E501
from bety_brapi.models.scale import Scale  # noqa: F401,E501
from bety_brapi.models.trait import Trait  # noqa: F401,E501
from bety_brapi import util


class ObservationVariable(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, context_of_use: List[str]=None, crop: str=None, _date: str=None, default_value: str=None, growth_stage: str=None, institution: str=None, language: str=None, method: Method=None, name: str=None, observation_variable_db_id: str=None, observation_variable_name: str=None, ontology_db_id: str=None, ontology_name: str=None, scale: Scale=None, scientist: str=None, status: str=None, submission_timestamp: datetime=None, synonyms: List[str]=None, trait: Trait=None, xref: str=None):  # noqa: E501
        """ObservationVariable - a model defined in Swagger

        :param context_of_use: The context_of_use of this ObservationVariable.  # noqa: E501
        :type context_of_use: List[str]
        :param crop: The crop of this ObservationVariable.  # noqa: E501
        :type crop: str
        :param _date: The _date of this ObservationVariable.  # noqa: E501
        :type _date: str
        :param default_value: The default_value of this ObservationVariable.  # noqa: E501
        :type default_value: str
        :param growth_stage: The growth_stage of this ObservationVariable.  # noqa: E501
        :type growth_stage: str
        :param institution: The institution of this ObservationVariable.  # noqa: E501
        :type institution: str
        :param language: The language of this ObservationVariable.  # noqa: E501
        :type language: str
        :param method: The method of this ObservationVariable.  # noqa: E501
        :type method: Method
        :param name: The name of this ObservationVariable.  # noqa: E501
        :type name: str
        :param observation_variable_db_id: The observation_variable_db_id of this ObservationVariable.  # noqa: E501
        :type observation_variable_db_id: str
        :param observation_variable_name: The observation_variable_name of this ObservationVariable.  # noqa: E501
        :type observation_variable_name: str
        :param ontology_db_id: The ontology_db_id of this ObservationVariable.  # noqa: E501
        :type ontology_db_id: str
        :param ontology_name: The ontology_name of this ObservationVariable.  # noqa: E501
        :type ontology_name: str
        :param scale: The scale of this ObservationVariable.  # noqa: E501
        :type scale: Scale
        :param scientist: The scientist of this ObservationVariable.  # noqa: E501
        :type scientist: str
        :param status: The status of this ObservationVariable.  # noqa: E501
        :type status: str
        :param submission_timestamp: The submission_timestamp of this ObservationVariable.  # noqa: E501
        :type submission_timestamp: datetime
        :param synonyms: The synonyms of this ObservationVariable.  # noqa: E501
        :type synonyms: List[str]
        :param trait: The trait of this ObservationVariable.  # noqa: E501
        :type trait: Trait
        :param xref: The xref of this ObservationVariable.  # noqa: E501
        :type xref: str
        """
        self.swagger_types = {
            'context_of_use': List[str],
            'crop': str,
            '_date': str,
            'default_value': str,
            'growth_stage': str,
            'institution': str,
            'language': str,
            'method': Method,
            'name': str,
            'observation_variable_db_id': str,
            'observation_variable_name': str,
            'ontology_db_id': str,
            'ontology_name': str,
            'scale': Scale,
            'scientist': str,
            'status': str,
            'submission_timestamp': datetime,
            'synonyms': List[str],
            'trait': Trait,
            'xref': str
        }

        self.attribute_map = {
            'context_of_use': 'contextOfUse',
            'crop': 'crop',
            '_date': 'date',
            'default_value': 'defaultValue',
            'growth_stage': 'growthStage',
            'institution': 'institution',
            'language': 'language',
            'method': 'method',
            'name': 'name',
            'observation_variable_db_id': 'observationVariableDbId',
            'observation_variable_name': 'observationVariableName',
            'ontology_db_id': 'ontologyDbId',
            'ontology_name': 'ontologyName',
            'scale': 'scale',
            'scientist': 'scientist',
            'status': 'status',
            'submission_timestamp': 'submissionTimestamp',
            'synonyms': 'synonyms',
            'trait': 'trait',
            'xref': 'xref'
        }

        self._context_of_use = context_of_use
        self._crop = crop
        self.__date = _date
        self._default_value = default_value
        self._growth_stage = growth_stage
        self._institution = institution
        self._language = language
        self._method = method
        self._name = name
        self._observation_variable_db_id = observation_variable_db_id
        self._observation_variable_name = observation_variable_name
        self._ontology_db_id = ontology_db_id
        self._ontology_name = ontology_name
        self._scale = scale
        self._scientist = scientist
        self._status = status
        self._submission_timestamp = submission_timestamp
        self._synonyms = synonyms
        self._trait = trait
        self._xref = xref

    @classmethod
    def from_dict(cls, dikt) -> 'ObservationVariable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The observationVariable of this ObservationVariable.  # noqa: E501
        :rtype: ObservationVariable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_of_use(self) -> List[str]:
        """Gets the context_of_use of this ObservationVariable.

        Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])  # noqa: E501

        :return: The context_of_use of this ObservationVariable.
        :rtype: List[str]
        """
        return self._context_of_use

    @context_of_use.setter
    def context_of_use(self, context_of_use: List[str]):
        """Sets the context_of_use of this ObservationVariable.

        Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])  # noqa: E501

        :param context_of_use: The context_of_use of this ObservationVariable.
        :type context_of_use: List[str]
        """

        self._context_of_use = context_of_use

    @property
    def crop(self) -> str:
        """Gets the crop of this ObservationVariable.

        Crop name (examples: \"Maize\", \"Wheat\")  # noqa: E501

        :return: The crop of this ObservationVariable.
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop: str):
        """Sets the crop of this ObservationVariable.

        Crop name (examples: \"Maize\", \"Wheat\")  # noqa: E501

        :param crop: The crop of this ObservationVariable.
        :type crop: str
        """

        self._crop = crop

    @property
    def _date(self) -> str:
        """Gets the _date of this ObservationVariable.

        Date of submission of the variable (ISO 8601).  # noqa: E501

        :return: The _date of this ObservationVariable.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this ObservationVariable.

        Date of submission of the variable (ISO 8601).  # noqa: E501

        :param _date: The _date of this ObservationVariable.
        :type _date: str
        """

        self.__date = _date

    @property
    def default_value(self) -> str:
        """Gets the default_value of this ObservationVariable.

        Variable default value. (examples: \"red\", \"2.3\", etc.)  # noqa: E501

        :return: The default_value of this ObservationVariable.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value: str):
        """Sets the default_value of this ObservationVariable.

        Variable default value. (examples: \"red\", \"2.3\", etc.)  # noqa: E501

        :param default_value: The default_value of this ObservationVariable.
        :type default_value: str
        """
        if default_value is None:
            raise ValueError("Invalid value for `default_value`, must not be `None`")  # noqa: E501

        self._default_value = default_value

    @property
    def growth_stage(self) -> str:
        """Gets the growth_stage of this ObservationVariable.

        Growth stage at which measurement is made (examples: \"flowering\")  # noqa: E501

        :return: The growth_stage of this ObservationVariable.
        :rtype: str
        """
        return self._growth_stage

    @growth_stage.setter
    def growth_stage(self, growth_stage: str):
        """Sets the growth_stage of this ObservationVariable.

        Growth stage at which measurement is made (examples: \"flowering\")  # noqa: E501

        :param growth_stage: The growth_stage of this ObservationVariable.
        :type growth_stage: str
        """

        self._growth_stage = growth_stage

    @property
    def institution(self) -> str:
        """Gets the institution of this ObservationVariable.

        Name of institution submitting the variable  # noqa: E501

        :return: The institution of this ObservationVariable.
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution: str):
        """Sets the institution of this ObservationVariable.

        Name of institution submitting the variable  # noqa: E501

        :param institution: The institution of this ObservationVariable.
        :type institution: str
        """

        self._institution = institution

    @property
    def language(self) -> str:
        """Gets the language of this ObservationVariable.

        2 letter ISO code for the language of submission of the variable.  # noqa: E501

        :return: The language of this ObservationVariable.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this ObservationVariable.

        2 letter ISO code for the language of submission of the variable.  # noqa: E501

        :param language: The language of this ObservationVariable.
        :type language: str
        """

        self._language = language

    @property
    def method(self) -> Method:
        """Gets the method of this ObservationVariable.

        The description of the method used to collect data for this variable  # noqa: E501

        :return: The method of this ObservationVariable.
        :rtype: Method
        """
        return self._method

    @method.setter
    def method(self, method: Method):
        """Sets the method of this ObservationVariable.

        The description of the method used to collect data for this variable  # noqa: E501

        :param method: The method of this ObservationVariable.
        :type method: Method
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def name(self) -> str:
        """Gets the name of this ObservationVariable.

        DEPRECATED in v1.3 - Use \"observationVariableName\"  # noqa: E501

        :return: The name of this ObservationVariable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ObservationVariable.

        DEPRECATED in v1.3 - Use \"observationVariableName\"  # noqa: E501

        :param name: The name of this ObservationVariable.
        :type name: str
        """

        self._name = name

    @property
    def observation_variable_db_id(self) -> str:
        """Gets the observation_variable_db_id of this ObservationVariable.

        Variable unique identifier  # noqa: E501

        :return: The observation_variable_db_id of this ObservationVariable.
        :rtype: str
        """
        return self._observation_variable_db_id

    @observation_variable_db_id.setter
    def observation_variable_db_id(self, observation_variable_db_id: str):
        """Sets the observation_variable_db_id of this ObservationVariable.

        Variable unique identifier  # noqa: E501

        :param observation_variable_db_id: The observation_variable_db_id of this ObservationVariable.
        :type observation_variable_db_id: str
        """
        if observation_variable_db_id is None:
            raise ValueError("Invalid value for `observation_variable_db_id`, must not be `None`")  # noqa: E501

        self._observation_variable_db_id = observation_variable_db_id

    @property
    def observation_variable_name(self) -> str:
        """Gets the observation_variable_name of this ObservationVariable.

        Variable name (usually a short name)  # noqa: E501

        :return: The observation_variable_name of this ObservationVariable.
        :rtype: str
        """
        return self._observation_variable_name

    @observation_variable_name.setter
    def observation_variable_name(self, observation_variable_name: str):
        """Sets the observation_variable_name of this ObservationVariable.

        Variable name (usually a short name)  # noqa: E501

        :param observation_variable_name: The observation_variable_name of this ObservationVariable.
        :type observation_variable_name: str
        """
        if observation_variable_name is None:
            raise ValueError("Invalid value for `observation_variable_name`, must not be `None`")  # noqa: E501

        self._observation_variable_name = observation_variable_name

    @property
    def ontology_db_id(self) -> str:
        """Gets the ontology_db_id of this ObservationVariable.

        Variable ontology unique identifier  # noqa: E501

        :return: The ontology_db_id of this ObservationVariable.
        :rtype: str
        """
        return self._ontology_db_id

    @ontology_db_id.setter
    def ontology_db_id(self, ontology_db_id: str):
        """Sets the ontology_db_id of this ObservationVariable.

        Variable ontology unique identifier  # noqa: E501

        :param ontology_db_id: The ontology_db_id of this ObservationVariable.
        :type ontology_db_id: str
        """
        if ontology_db_id is None:
            raise ValueError("Invalid value for `ontology_db_id`, must not be `None`")  # noqa: E501

        self._ontology_db_id = ontology_db_id

    @property
    def ontology_name(self) -> str:
        """Gets the ontology_name of this ObservationVariable.

        Variable ontology name (usually a short name)  # noqa: E501

        :return: The ontology_name of this ObservationVariable.
        :rtype: str
        """
        return self._ontology_name

    @ontology_name.setter
    def ontology_name(self, ontology_name: str):
        """Sets the ontology_name of this ObservationVariable.

        Variable ontology name (usually a short name)  # noqa: E501

        :param ontology_name: The ontology_name of this ObservationVariable.
        :type ontology_name: str
        """
        if ontology_name is None:
            raise ValueError("Invalid value for `ontology_name`, must not be `None`")  # noqa: E501

        self._ontology_name = ontology_name

    @property
    def scale(self) -> Scale:
        """Gets the scale of this ObservationVariable.

        The description of the reference scale and units used on the collected data for this variable  # noqa: E501

        :return: The scale of this ObservationVariable.
        :rtype: Scale
        """
        return self._scale

    @scale.setter
    def scale(self, scale: Scale):
        """Sets the scale of this ObservationVariable.

        The description of the reference scale and units used on the collected data for this variable  # noqa: E501

        :param scale: The scale of this ObservationVariable.
        :type scale: Scale
        """
        if scale is None:
            raise ValueError("Invalid value for `scale`, must not be `None`")  # noqa: E501

        self._scale = scale

    @property
    def scientist(self) -> str:
        """Gets the scientist of this ObservationVariable.

        Name of scientist submitting the variable.  # noqa: E501

        :return: The scientist of this ObservationVariable.
        :rtype: str
        """
        return self._scientist

    @scientist.setter
    def scientist(self, scientist: str):
        """Sets the scientist of this ObservationVariable.

        Name of scientist submitting the variable.  # noqa: E501

        :param scientist: The scientist of this ObservationVariable.
        :type scientist: str
        """

        self._scientist = scientist

    @property
    def status(self) -> str:
        """Gets the status of this ObservationVariable.

        Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)  # noqa: E501

        :return: The status of this ObservationVariable.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ObservationVariable.

        Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)  # noqa: E501

        :param status: The status of this ObservationVariable.
        :type status: str
        """

        self._status = status

    @property
    def submission_timestamp(self) -> datetime:
        """Gets the submission_timestamp of this ObservationVariable.

        Timestamp when the Variable was added  # noqa: E501

        :return: The submission_timestamp of this ObservationVariable.
        :rtype: datetime
        """
        return self._submission_timestamp

    @submission_timestamp.setter
    def submission_timestamp(self, submission_timestamp: datetime):
        """Sets the submission_timestamp of this ObservationVariable.

        Timestamp when the Variable was added  # noqa: E501

        :param submission_timestamp: The submission_timestamp of this ObservationVariable.
        :type submission_timestamp: datetime
        """

        self._submission_timestamp = submission_timestamp

    @property
    def synonyms(self) -> List[str]:
        """Gets the synonyms of this ObservationVariable.

        Other variable names  # noqa: E501

        :return: The synonyms of this ObservationVariable.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms: List[str]):
        """Sets the synonyms of this ObservationVariable.

        Other variable names  # noqa: E501

        :param synonyms: The synonyms of this ObservationVariable.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def trait(self) -> Trait:
        """Gets the trait of this ObservationVariable.

        The description of the trait which is being examined for this variable  # noqa: E501

        :return: The trait of this ObservationVariable.
        :rtype: Trait
        """
        return self._trait

    @trait.setter
    def trait(self, trait: Trait):
        """Sets the trait of this ObservationVariable.

        The description of the trait which is being examined for this variable  # noqa: E501

        :param trait: The trait of this ObservationVariable.
        :type trait: Trait
        """
        if trait is None:
            raise ValueError("Invalid value for `trait`, must not be `None`")  # noqa: E501

        self._trait = trait

    @property
    def xref(self) -> str:
        """Gets the xref of this ObservationVariable.

        Cross reference of the variable term to a term from an external ontology or to a database of a major system.  # noqa: E501

        :return: The xref of this ObservationVariable.
        :rtype: str
        """
        return self._xref

    @xref.setter
    def xref(self, xref: str):
        """Sets the xref of this ObservationVariable.

        Cross reference of the variable term to a term from an external ontology or to a database of a major system.  # noqa: E501

        :param xref: The xref of this ObservationVariable.
        :type xref: str
        """

        self._xref = xref
